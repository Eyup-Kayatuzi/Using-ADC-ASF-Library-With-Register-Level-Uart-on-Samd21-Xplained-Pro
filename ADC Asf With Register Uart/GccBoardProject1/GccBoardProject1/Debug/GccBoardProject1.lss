
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000021c0  000021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000007c  20000000  000021c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000ec  2000007c  00002244  0002007c  2**2
                  ALLOC
  4 .stack        00002000  20000168  00002330  0002007c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001eeba  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002df9  00000000  00000000  0003efb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002e2d  00000000  00000000  00041db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000003c0  00000000  00000000  00044bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  00044f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a49c  00000000  00000000  00045345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000099eb  00000000  00000000  0005f7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e2a1  00000000  00000000  000691cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000b5c  00000000  00000000  000f7470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 21 00 20 f9 10 00 00 f5 10 00 00 f5 10 00 00     h!. ............
	...
      2c:	f5 10 00 00 00 00 00 00 00 00 00 00 f5 10 00 00     ................
      3c:	f5 10 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      4c:	f5 10 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      5c:	f5 10 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      6c:	f5 10 00 00 49 12 00 00 f5 10 00 00 f5 10 00 00     ....I...........
      7c:	f5 10 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      8c:	f5 10 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      9c:	85 05 00 00 f5 10 00 00 f5 10 00 00 f5 10 00 00     ................
      ac:	f5 10 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	000021c8 	.word	0x000021c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
     108:	000021c8 	.word	0x000021c8
     10c:	000021c8 	.word	0x000021c8
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	200000c8 	.word	0x200000c8
     494:	00000f45 	.word	0x00000f45
     498:	00000eb9 	.word	0x00000eb9
     49c:	00001799 	.word	0x00001799
     4a0:	000020c0 	.word	0x000020c0
     4a4:	00001095 	.word	0x00001095
     4a8:	00001fec 	.word	0x00001fec
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2f      	ldr	r3, [pc, #188]	; (644 <ADC_Handler+0xc0>)
     588:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	7e1a      	ldrb	r2, [r3, #24]
     58e:	7ddc      	ldrb	r4, [r3, #23]
     590:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     592:	07e2      	lsls	r2, r4, #31
     594:	d416      	bmi.n	5c4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     596:	0763      	lsls	r3, r4, #29
     598:	d508      	bpl.n	5ac <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     59a:	2304      	movs	r3, #4
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5a0:	7eeb      	ldrb	r3, [r5, #27]
     5a2:	079b      	lsls	r3, r3, #30
     5a4:	d502      	bpl.n	5ac <ADC_Handler+0x28>
     5a6:	7eab      	ldrb	r3, [r5, #26]
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d442      	bmi.n	632 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5ac:	07a3      	lsls	r3, r4, #30
     5ae:	d508      	bpl.n	5c2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5b0:	2302      	movs	r3, #2
     5b2:	682a      	ldr	r2, [r5, #0]
     5b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5b6:	7eeb      	ldrb	r3, [r5, #27]
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	d502      	bpl.n	5c2 <ADC_Handler+0x3e>
     5bc:	7eab      	ldrb	r3, [r5, #26]
     5be:	075b      	lsls	r3, r3, #29
     5c0:	d43b      	bmi.n	63a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5c4:	2201      	movs	r2, #1
     5c6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5c8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ca:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     5cc:	b25b      	sxtb	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	dbfb      	blt.n	5ca <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     5d2:	6969      	ldr	r1, [r5, #20]
     5d4:	1c8b      	adds	r3, r1, #2
     5d6:	616b      	str	r3, [r5, #20]
     5d8:	8b53      	ldrh	r3, [r2, #26]
     5da:	b29b      	uxth	r3, r3
     5dc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     5de:	8b2b      	ldrh	r3, [r5, #24]
     5e0:	3b01      	subs	r3, #1
     5e2:	b29b      	uxth	r3, r3
     5e4:	832b      	strh	r3, [r5, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d011      	beq.n	60e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     5ea:	7f6b      	ldrb	r3, [r5, #29]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0d2      	beq.n	596 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5f0:	682a      	ldr	r2, [r5, #0]
     5f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5f4:	b25b      	sxtb	r3, r3
     5f6:	2b00      	cmp	r3, #0
     5f8:	dbfb      	blt.n	5f2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5fa:	7b13      	ldrb	r3, [r2, #12]
     5fc:	2102      	movs	r1, #2
     5fe:	430b      	orrs	r3, r1
     600:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     602:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     604:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	dbfb      	blt.n	604 <ADC_Handler+0x80>
     60c:	e7c3      	b.n	596 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     60e:	2301      	movs	r3, #1
     610:	682a      	ldr	r2, [r5, #0]
     612:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     614:	7f2b      	ldrb	r3, [r5, #28]
     616:	2b05      	cmp	r3, #5
     618:	d1bd      	bne.n	596 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     61a:	2300      	movs	r3, #0
     61c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     61e:	7eeb      	ldrb	r3, [r5, #27]
     620:	07db      	lsls	r3, r3, #31
     622:	d5b8      	bpl.n	596 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     624:	7eab      	ldrb	r3, [r5, #26]
     626:	07db      	lsls	r3, r3, #31
     628:	d5b5      	bpl.n	596 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     62a:	0028      	movs	r0, r5
     62c:	68ab      	ldr	r3, [r5, #8]
     62e:	4798      	blx	r3
     630:	e7b1      	b.n	596 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     632:	0028      	movs	r0, r5
     634:	68eb      	ldr	r3, [r5, #12]
     636:	4798      	blx	r3
     638:	e7b8      	b.n	5ac <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     63a:	692b      	ldr	r3, [r5, #16]
     63c:	0028      	movs	r0, r5
     63e:	4798      	blx	r3
}
     640:	e7bf      	b.n	5c2 <ADC_Handler+0x3e>
     642:	46c0      	nop			; (mov r8, r8)
     644:	200000c8 	.word	0x200000c8

00000648 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     648:	1c93      	adds	r3, r2, #2
     64a:	009b      	lsls	r3, r3, #2
     64c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     64e:	2301      	movs	r3, #1
     650:	4093      	lsls	r3, r2
     652:	001a      	movs	r2, r3
     654:	7e83      	ldrb	r3, [r0, #26]
     656:	4313      	orrs	r3, r2
     658:	7683      	strb	r3, [r0, #26]
}
     65a:	4770      	bx	lr

0000065c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     65c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     65e:	8b03      	ldrh	r3, [r0, #24]
     660:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     662:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     664:	2b00      	cmp	r3, #0
     666:	d001      	beq.n	66c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     668:	0020      	movs	r0, r4
     66a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     66c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     66e:	2b05      	cmp	r3, #5
     670:	d0fa      	beq.n	668 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     672:	2305      	movs	r3, #5
     674:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     676:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     678:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     67a:	3b04      	subs	r3, #4
     67c:	6802      	ldr	r2, [r0, #0]
     67e:	75d3      	strb	r3, [r2, #23]
	if(module_inst->software_trigger == true) {
     680:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     682:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     684:	2b00      	cmp	r3, #0
     686:	d0ef      	beq.n	668 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     688:	6802      	ldr	r2, [r0, #0]
     68a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     68c:	b25b      	sxtb	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	dbfb      	blt.n	68a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     692:	7b13      	ldrb	r3, [r2, #12]
     694:	2102      	movs	r1, #2
     696:	430b      	orrs	r3, r1
     698:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     69a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     69c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     69e:	b25b      	sxtb	r3, r3
     6a0:	2b00      	cmp	r3, #0
     6a2:	dbfb      	blt.n	69c <adc_read_buffer_job+0x40>
	return STATUS_OK;
     6a4:	2400      	movs	r4, #0
     6a6:	e7df      	b.n	668 <adc_read_buffer_job+0xc>

000006a8 <uartInit>:
 */ 
#include "SERCOMforUSART.h"
uint32_t fref = 48000000;
uint64_t baudRate = 0;

void uartInit(uint32_t fbaud){
     6a8:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6aa:	2280      	movs	r2, #128	; 0x80
     6ac:	0152      	lsls	r2, r2, #5
     6ae:	4b25      	ldr	r3, [pc, #148]	; (744 <uartInit+0x9c>)
     6b0:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SERCOM3_IRQn); // global interrupt has been enabled.
	SERCOM3->USART.CTRLA.bit.ENABLE = 0;
     6b2:	4c25      	ldr	r4, [pc, #148]	; (748 <uartInit+0xa0>)
     6b4:	6823      	ldr	r3, [r4, #0]
     6b6:	2502      	movs	r5, #2
     6b8:	43ab      	bics	r3, r5
     6ba:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.MODE = 0x1; // for usart with internal clock
     6bc:	6823      	ldr	r3, [r4, #0]
     6be:	221c      	movs	r2, #28
     6c0:	4393      	bics	r3, r2
     6c2:	3a18      	subs	r2, #24
     6c4:	4313      	orrs	r3, r2
     6c6:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.CMODE = 0; // for async communication
     6c8:	6823      	ldr	r3, [r4, #0]
     6ca:	4a20      	ldr	r2, [pc, #128]	; (74c <uartInit+0xa4>)
     6cc:	4013      	ands	r3, r2
     6ce:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.RXPO = 0x1; // for pad[1] for rx pin pa23 as pad[1]
     6d0:	6823      	ldr	r3, [r4, #0]
     6d2:	4a1f      	ldr	r2, [pc, #124]	; (750 <uartInit+0xa8>)
     6d4:	401a      	ands	r2, r3
     6d6:	2380      	movs	r3, #128	; 0x80
     6d8:	035b      	lsls	r3, r3, #13
     6da:	4313      	orrs	r3, r2
     6dc:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.TXPO = 0x0;
     6de:	6823      	ldr	r3, [r4, #0]
     6e0:	4a1c      	ldr	r2, [pc, #112]	; (754 <uartInit+0xac>)
     6e2:	4013      	ands	r3, r2
     6e4:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLB.bit.CHSIZE = 0x0; // for 8 bits
     6e6:	6863      	ldr	r3, [r4, #4]
     6e8:	2207      	movs	r2, #7
     6ea:	4393      	bics	r3, r2
     6ec:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.CTRLA.bit.DORD = 1;// most significant bit first
     6ee:	6822      	ldr	r2, [r4, #0]
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	05db      	lsls	r3, r3, #23
     6f4:	4313      	orrs	r3, r2
     6f6:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.FORM = 0x0; // only frame, so without party bit
     6f8:	6823      	ldr	r3, [r4, #0]
     6fa:	4a17      	ldr	r2, [pc, #92]	; (758 <uartInit+0xb0>)
     6fc:	4013      	ands	r3, r2
     6fe:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLB.bit.SBMODE = 0; // for one stop bit sbmode is 0, 2 stop bit sbmod is 1
     700:	6863      	ldr	r3, [r4, #4]
     702:	2240      	movs	r2, #64	; 0x40
     704:	4393      	bics	r3, r2
     706:	6063      	str	r3, [r4, #4]

	uint64_t baudRate = (uint64_t)65536 * (fref - 16 * fbaud) / fref; 
     708:	4b14      	ldr	r3, [pc, #80]	; (75c <uartInit+0xb4>)
     70a:	681a      	ldr	r2, [r3, #0]
     70c:	0100      	lsls	r0, r0, #4
     70e:	1a10      	subs	r0, r2, r0
     710:	0c01      	lsrs	r1, r0, #16
     712:	0400      	lsls	r0, r0, #16
     714:	2300      	movs	r3, #0
     716:	4e12      	ldr	r6, [pc, #72]	; (760 <uartInit+0xb8>)
     718:	47b0      	blx	r6
	SERCOM3->USART.BAUD.bit.BAUD = baudRate;
     71a:	b280      	uxth	r0, r0
     71c:	81a0      	strh	r0, [r4, #12]
	SERCOM3->USART.CTRLB.bit.RXEN = 1; // receiver is enabled
     71e:	6862      	ldr	r2, [r4, #4]
     720:	2380      	movs	r3, #128	; 0x80
     722:	029b      	lsls	r3, r3, #10
     724:	4313      	orrs	r3, r2
     726:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.CTRLB.bit.TXEN = 1;
     728:	6862      	ldr	r2, [r4, #4]
     72a:	2380      	movs	r3, #128	; 0x80
     72c:	025b      	lsls	r3, r3, #9
     72e:	4313      	orrs	r3, r2
     730:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.INTENSET.bit.RXC = 1; // receive compleate interrupt is enabled
     732:	7da3      	ldrb	r3, [r4, #22]
     734:	2204      	movs	r2, #4
     736:	4313      	orrs	r3, r2
     738:	75a3      	strb	r3, [r4, #22]
	SERCOM3->USART.CTRLA.bit.ENABLE = 1;
     73a:	6823      	ldr	r3, [r4, #0]
     73c:	431d      	orrs	r5, r3
     73e:	6025      	str	r5, [r4, #0]
	
}	
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	46c0      	nop			; (mov r8, r8)
     744:	e000e100 	.word	0xe000e100
     748:	42001400 	.word	0x42001400
     74c:	efffffff 	.word	0xefffffff
     750:	ffcfffff 	.word	0xffcfffff
     754:	fffcffff 	.word	0xfffcffff
     758:	f0ffffff 	.word	0xf0ffffff
     75c:	20000000 	.word	0x20000000
     760:	0000153d 	.word	0x0000153d

00000764 <uartWrite>:
void uartWrite(uint8_t *veri, uint8_t karakterAdedi){
     764:	b510      	push	{r4, lr}
	
	if(SERCOM3->USART.INTFLAG.bit.DRE == 1){
     766:	4b0d      	ldr	r3, [pc, #52]	; (79c <uartWrite+0x38>)
     768:	7e1b      	ldrb	r3, [r3, #24]
     76a:	07db      	lsls	r3, r3, #31
     76c:	d400      	bmi.n	770 <uartWrite+0xc>
			while(!SERCOM3->USART.INTFLAG.bit.TXC){}
			
			}
	}

}
     76e:	bd10      	pop	{r4, pc}
		for(uint8_t a = 0; a < karakterAdedi; a++){
     770:	2900      	cmp	r1, #0
     772:	d0fc      	beq.n	76e <uartWrite+0xa>
     774:	0004      	movs	r4, r0
     776:	3901      	subs	r1, #1
     778:	b2c9      	uxtb	r1, r1
     77a:	3101      	adds	r1, #1
     77c:	1840      	adds	r0, r0, r1
			SERCOM3->USART.DATA.bit.DATA = *(veri + a);
     77e:	4a07      	ldr	r2, [pc, #28]	; (79c <uartWrite+0x38>)
     780:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     782:	7821      	ldrb	r1, [r4, #0]
     784:	0a5b      	lsrs	r3, r3, #9
     786:	025b      	lsls	r3, r3, #9
     788:	430b      	orrs	r3, r1
     78a:	8513      	strh	r3, [r2, #40]	; 0x28
			while(!SERCOM3->USART.INTFLAG.bit.TXC){}
     78c:	7e13      	ldrb	r3, [r2, #24]
     78e:	079b      	lsls	r3, r3, #30
     790:	d5fc      	bpl.n	78c <uartWrite+0x28>
     792:	3401      	adds	r4, #1
		for(uint8_t a = 0; a < karakterAdedi; a++){
     794:	4284      	cmp	r4, r0
     796:	d1f3      	bne.n	780 <uartWrite+0x1c>
     798:	e7e9      	b.n	76e <uartWrite+0xa>
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	42001400 	.word	0x42001400

000007a0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7a0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7a2:	2000      	movs	r0, #0
     7a4:	4b08      	ldr	r3, [pc, #32]	; (7c8 <delay_init+0x28>)
     7a6:	4798      	blx	r3
     7a8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7aa:	4c08      	ldr	r4, [pc, #32]	; (7cc <delay_init+0x2c>)
     7ac:	21fa      	movs	r1, #250	; 0xfa
     7ae:	0089      	lsls	r1, r1, #2
     7b0:	47a0      	blx	r4
     7b2:	4b07      	ldr	r3, [pc, #28]	; (7d0 <delay_init+0x30>)
     7b4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7b6:	4907      	ldr	r1, [pc, #28]	; (7d4 <delay_init+0x34>)
     7b8:	0028      	movs	r0, r5
     7ba:	47a0      	blx	r4
     7bc:	4b06      	ldr	r3, [pc, #24]	; (7d8 <delay_init+0x38>)
     7be:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7c0:	2205      	movs	r2, #5
     7c2:	4b06      	ldr	r3, [pc, #24]	; (7dc <delay_init+0x3c>)
     7c4:	601a      	str	r2, [r3, #0]
}
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	00000e2d 	.word	0x00000e2d
     7cc:	00001425 	.word	0x00001425
     7d0:	20000004 	.word	0x20000004
     7d4:	000f4240 	.word	0x000f4240
     7d8:	20000008 	.word	0x20000008
     7dc:	e000e010 	.word	0xe000e010

000007e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     7e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     7e2:	4b08      	ldr	r3, [pc, #32]	; (804 <delay_cycles_ms+0x24>)
     7e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     7e6:	4a08      	ldr	r2, [pc, #32]	; (808 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     7e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7ea:	2180      	movs	r1, #128	; 0x80
     7ec:	0249      	lsls	r1, r1, #9
	while (n--) {
     7ee:	3801      	subs	r0, #1
     7f0:	d307      	bcc.n	802 <delay_cycles_ms+0x22>
	if (n > 0) {
     7f2:	2c00      	cmp	r4, #0
     7f4:	d0fb      	beq.n	7ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     7f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     7f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7fa:	6813      	ldr	r3, [r2, #0]
     7fc:	420b      	tst	r3, r1
     7fe:	d0fc      	beq.n	7fa <delay_cycles_ms+0x1a>
     800:	e7f5      	b.n	7ee <delay_cycles_ms+0xe>
	}
}
     802:	bd30      	pop	{r4, r5, pc}
     804:	20000004 	.word	0x20000004
     808:	e000e010 	.word	0xe000e010

0000080c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     80c:	4b0c      	ldr	r3, [pc, #48]	; (840 <cpu_irq_enter_critical+0x34>)
     80e:	681b      	ldr	r3, [r3, #0]
     810:	2b00      	cmp	r3, #0
     812:	d106      	bne.n	822 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     814:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     818:	2b00      	cmp	r3, #0
     81a:	d007      	beq.n	82c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     81c:	2200      	movs	r2, #0
     81e:	4b09      	ldr	r3, [pc, #36]	; (844 <cpu_irq_enter_critical+0x38>)
     820:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     822:	4a07      	ldr	r2, [pc, #28]	; (840 <cpu_irq_enter_critical+0x34>)
     824:	6813      	ldr	r3, [r2, #0]
     826:	3301      	adds	r3, #1
     828:	6013      	str	r3, [r2, #0]
}
     82a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     82c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     82e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     832:	2200      	movs	r2, #0
     834:	4b04      	ldr	r3, [pc, #16]	; (848 <cpu_irq_enter_critical+0x3c>)
     836:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     838:	3201      	adds	r2, #1
     83a:	4b02      	ldr	r3, [pc, #8]	; (844 <cpu_irq_enter_critical+0x38>)
     83c:	701a      	strb	r2, [r3, #0]
     83e:	e7f0      	b.n	822 <cpu_irq_enter_critical+0x16>
     840:	20000098 	.word	0x20000098
     844:	2000009c 	.word	0x2000009c
     848:	2000000c 	.word	0x2000000c

0000084c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     84c:	4b08      	ldr	r3, [pc, #32]	; (870 <cpu_irq_leave_critical+0x24>)
     84e:	681a      	ldr	r2, [r3, #0]
     850:	3a01      	subs	r2, #1
     852:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     854:	681b      	ldr	r3, [r3, #0]
     856:	2b00      	cmp	r3, #0
     858:	d109      	bne.n	86e <cpu_irq_leave_critical+0x22>
     85a:	4b06      	ldr	r3, [pc, #24]	; (874 <cpu_irq_leave_critical+0x28>)
     85c:	781b      	ldrb	r3, [r3, #0]
     85e:	2b00      	cmp	r3, #0
     860:	d005      	beq.n	86e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     862:	2201      	movs	r2, #1
     864:	4b04      	ldr	r3, [pc, #16]	; (878 <cpu_irq_leave_critical+0x2c>)
     866:	701a      	strb	r2, [r3, #0]
     868:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     86c:	b662      	cpsie	i
	}
}
     86e:	4770      	bx	lr
     870:	20000098 	.word	0x20000098
     874:	2000009c 	.word	0x2000009c
     878:	2000000c 	.word	0x2000000c

0000087c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     880:	ac01      	add	r4, sp, #4
     882:	2501      	movs	r5, #1
     884:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     886:	2700      	movs	r7, #0
     888:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     88a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     88c:	0021      	movs	r1, r4
     88e:	203e      	movs	r0, #62	; 0x3e
     890:	4e06      	ldr	r6, [pc, #24]	; (8ac <system_board_init+0x30>)
     892:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     894:	2280      	movs	r2, #128	; 0x80
     896:	05d2      	lsls	r2, r2, #23
     898:	4b05      	ldr	r3, [pc, #20]	; (8b0 <system_board_init+0x34>)
     89a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     89c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     89e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     8a0:	0021      	movs	r1, r4
     8a2:	200f      	movs	r0, #15
     8a4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     8a6:	b003      	add	sp, #12
     8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	000008b5 	.word	0x000008b5
     8b0:	41004480 	.word	0x41004480

000008b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8b4:	b500      	push	{lr}
     8b6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8b8:	ab01      	add	r3, sp, #4
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8be:	780a      	ldrb	r2, [r1, #0]
     8c0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8c2:	784a      	ldrb	r2, [r1, #1]
     8c4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8c6:	788a      	ldrb	r2, [r1, #2]
     8c8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8ca:	0019      	movs	r1, r3
     8cc:	4b01      	ldr	r3, [pc, #4]	; (8d4 <port_pin_set_config+0x20>)
     8ce:	4798      	blx	r3
}
     8d0:	b003      	add	sp, #12
     8d2:	bd00      	pop	{pc}
     8d4:	00001095 	.word	0x00001095

000008d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     8d8:	b510      	push	{r4, lr}
	switch (clock_source) {
     8da:	2808      	cmp	r0, #8
     8dc:	d803      	bhi.n	8e6 <system_clock_source_get_hz+0xe>
     8de:	0080      	lsls	r0, r0, #2
     8e0:	4b1c      	ldr	r3, [pc, #112]	; (954 <system_clock_source_get_hz+0x7c>)
     8e2:	581b      	ldr	r3, [r3, r0]
     8e4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     8e6:	2000      	movs	r0, #0
     8e8:	e032      	b.n	950 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <system_clock_source_get_hz+0x80>)
     8ec:	6918      	ldr	r0, [r3, #16]
     8ee:	e02f      	b.n	950 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     8f0:	4b1a      	ldr	r3, [pc, #104]	; (95c <system_clock_source_get_hz+0x84>)
     8f2:	6a1b      	ldr	r3, [r3, #32]
     8f4:	059b      	lsls	r3, r3, #22
     8f6:	0f9b      	lsrs	r3, r3, #30
     8f8:	4819      	ldr	r0, [pc, #100]	; (960 <system_clock_source_get_hz+0x88>)
     8fa:	40d8      	lsrs	r0, r3
     8fc:	e028      	b.n	950 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     8fe:	4b16      	ldr	r3, [pc, #88]	; (958 <system_clock_source_get_hz+0x80>)
     900:	6958      	ldr	r0, [r3, #20]
     902:	e025      	b.n	950 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     904:	4b14      	ldr	r3, [pc, #80]	; (958 <system_clock_source_get_hz+0x80>)
     906:	681b      	ldr	r3, [r3, #0]
			return 0;
     908:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     90a:	079b      	lsls	r3, r3, #30
     90c:	d520      	bpl.n	950 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     90e:	4913      	ldr	r1, [pc, #76]	; (95c <system_clock_source_get_hz+0x84>)
     910:	2210      	movs	r2, #16
     912:	68cb      	ldr	r3, [r1, #12]
     914:	421a      	tst	r2, r3
     916:	d0fc      	beq.n	912 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     918:	4b0f      	ldr	r3, [pc, #60]	; (958 <system_clock_source_get_hz+0x80>)
     91a:	681a      	ldr	r2, [r3, #0]
     91c:	2324      	movs	r3, #36	; 0x24
     91e:	4013      	ands	r3, r2
     920:	2b04      	cmp	r3, #4
     922:	d001      	beq.n	928 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     924:	480f      	ldr	r0, [pc, #60]	; (964 <system_clock_source_get_hz+0x8c>)
     926:	e013      	b.n	950 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     928:	2000      	movs	r0, #0
     92a:	4b0f      	ldr	r3, [pc, #60]	; (968 <system_clock_source_get_hz+0x90>)
     92c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     92e:	4b0a      	ldr	r3, [pc, #40]	; (958 <system_clock_source_get_hz+0x80>)
     930:	689b      	ldr	r3, [r3, #8]
     932:	041b      	lsls	r3, r3, #16
     934:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     936:	4358      	muls	r0, r3
     938:	e00a      	b.n	950 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     93a:	2350      	movs	r3, #80	; 0x50
     93c:	4a07      	ldr	r2, [pc, #28]	; (95c <system_clock_source_get_hz+0x84>)
     93e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     940:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     942:	075b      	lsls	r3, r3, #29
     944:	d504      	bpl.n	950 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     946:	4b04      	ldr	r3, [pc, #16]	; (958 <system_clock_source_get_hz+0x80>)
     948:	68d8      	ldr	r0, [r3, #12]
     94a:	e001      	b.n	950 <system_clock_source_get_hz+0x78>
		return 32768UL;
     94c:	2080      	movs	r0, #128	; 0x80
     94e:	0200      	lsls	r0, r0, #8
	}
}
     950:	bd10      	pop	{r4, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	00002110 	.word	0x00002110
     958:	200000a0 	.word	0x200000a0
     95c:	40000800 	.word	0x40000800
     960:	007a1200 	.word	0x007a1200
     964:	02dc6c00 	.word	0x02dc6c00
     968:	00000f61 	.word	0x00000f61

0000096c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     96c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     96e:	490c      	ldr	r1, [pc, #48]	; (9a0 <system_clock_source_osc8m_set_config+0x34>)
     970:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     972:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     974:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     976:	7840      	ldrb	r0, [r0, #1]
     978:	2201      	movs	r2, #1
     97a:	4010      	ands	r0, r2
     97c:	0180      	lsls	r0, r0, #6
     97e:	2640      	movs	r6, #64	; 0x40
     980:	43b3      	bics	r3, r6
     982:	4303      	orrs	r3, r0
     984:	402a      	ands	r2, r5
     986:	01d2      	lsls	r2, r2, #7
     988:	2080      	movs	r0, #128	; 0x80
     98a:	4383      	bics	r3, r0
     98c:	4313      	orrs	r3, r2
     98e:	2203      	movs	r2, #3
     990:	4022      	ands	r2, r4
     992:	0212      	lsls	r2, r2, #8
     994:	4803      	ldr	r0, [pc, #12]	; (9a4 <system_clock_source_osc8m_set_config+0x38>)
     996:	4003      	ands	r3, r0
     998:	4313      	orrs	r3, r2
     99a:	620b      	str	r3, [r1, #32]
}
     99c:	bd70      	pop	{r4, r5, r6, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	40000800 	.word	0x40000800
     9a4:	fffffcff 	.word	0xfffffcff

000009a8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9aa:	46de      	mov	lr, fp
     9ac:	4657      	mov	r7, sl
     9ae:	464e      	mov	r6, r9
     9b0:	4645      	mov	r5, r8
     9b2:	b5e0      	push	{r5, r6, r7, lr}
     9b4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     9b6:	4b26      	ldr	r3, [pc, #152]	; (a50 <system_clock_source_xosc32k_set_config+0xa8>)
     9b8:	469b      	mov	fp, r3
     9ba:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     9bc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     9be:	7800      	ldrb	r0, [r0, #0]
     9c0:	4242      	negs	r2, r0
     9c2:	4142      	adcs	r2, r0
     9c4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     9c6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     9c8:	78ca      	ldrb	r2, [r1, #3]
     9ca:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     9cc:	790a      	ldrb	r2, [r1, #4]
     9ce:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     9d0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     9d2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     9d4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     9d6:	688a      	ldr	r2, [r1, #8]
     9d8:	491e      	ldr	r1, [pc, #120]	; (a54 <system_clock_source_xosc32k_set_config+0xac>)
     9da:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     9dc:	2101      	movs	r1, #1
     9de:	464a      	mov	r2, r9
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	4691      	mov	r9, r2
     9e4:	2204      	movs	r2, #4
     9e6:	4393      	bics	r3, r2
     9e8:	464a      	mov	r2, r9
     9ea:	4313      	orrs	r3, r2
     9ec:	4642      	mov	r2, r8
     9ee:	400a      	ands	r2, r1
     9f0:	00d2      	lsls	r2, r2, #3
     9f2:	4690      	mov	r8, r2
     9f4:	2208      	movs	r2, #8
     9f6:	4393      	bics	r3, r2
     9f8:	4642      	mov	r2, r8
     9fa:	4313      	orrs	r3, r2
     9fc:	4662      	mov	r2, ip
     9fe:	400a      	ands	r2, r1
     a00:	0112      	lsls	r2, r2, #4
     a02:	4694      	mov	ip, r2
     a04:	2210      	movs	r2, #16
     a06:	4393      	bics	r3, r2
     a08:	4662      	mov	r2, ip
     a0a:	4313      	orrs	r3, r2
     a0c:	4008      	ands	r0, r1
     a0e:	0140      	lsls	r0, r0, #5
     a10:	2220      	movs	r2, #32
     a12:	4393      	bics	r3, r2
     a14:	4303      	orrs	r3, r0
     a16:	400f      	ands	r7, r1
     a18:	01bf      	lsls	r7, r7, #6
     a1a:	2040      	movs	r0, #64	; 0x40
     a1c:	4383      	bics	r3, r0
     a1e:	433b      	orrs	r3, r7
     a20:	400e      	ands	r6, r1
     a22:	01f6      	lsls	r6, r6, #7
     a24:	3040      	adds	r0, #64	; 0x40
     a26:	4383      	bics	r3, r0
     a28:	4333      	orrs	r3, r6
     a2a:	3879      	subs	r0, #121	; 0x79
     a2c:	4005      	ands	r5, r0
     a2e:	022d      	lsls	r5, r5, #8
     a30:	4809      	ldr	r0, [pc, #36]	; (a58 <system_clock_source_xosc32k_set_config+0xb0>)
     a32:	4003      	ands	r3, r0
     a34:	432b      	orrs	r3, r5
     a36:	4021      	ands	r1, r4
     a38:	0309      	lsls	r1, r1, #12
     a3a:	4808      	ldr	r0, [pc, #32]	; (a5c <system_clock_source_xosc32k_set_config+0xb4>)
     a3c:	4003      	ands	r3, r0
     a3e:	430b      	orrs	r3, r1
     a40:	465a      	mov	r2, fp
     a42:	8293      	strh	r3, [r2, #20]
}
     a44:	bc3c      	pop	{r2, r3, r4, r5}
     a46:	4690      	mov	r8, r2
     a48:	4699      	mov	r9, r3
     a4a:	46a2      	mov	sl, r4
     a4c:	46ab      	mov	fp, r5
     a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a50:	40000800 	.word	0x40000800
     a54:	200000a0 	.word	0x200000a0
     a58:	fffff8ff 	.word	0xfffff8ff
     a5c:	ffffefff 	.word	0xffffefff

00000a60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     a60:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     a62:	7a03      	ldrb	r3, [r0, #8]
     a64:	069b      	lsls	r3, r3, #26
     a66:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     a68:	8942      	ldrh	r2, [r0, #10]
     a6a:	0592      	lsls	r2, r2, #22
     a6c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     a6e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     a70:	4918      	ldr	r1, [pc, #96]	; (ad4 <system_clock_source_dfll_set_config+0x74>)
     a72:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     a74:	7983      	ldrb	r3, [r0, #6]
     a76:	79c2      	ldrb	r2, [r0, #7]
     a78:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     a7a:	8842      	ldrh	r2, [r0, #2]
     a7c:	8884      	ldrh	r4, [r0, #4]
     a7e:	4322      	orrs	r2, r4
     a80:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     a82:	7842      	ldrb	r2, [r0, #1]
     a84:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     a86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     a88:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     a8a:	7803      	ldrb	r3, [r0, #0]
     a8c:	2b04      	cmp	r3, #4
     a8e:	d011      	beq.n	ab4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     a90:	2b20      	cmp	r3, #32
     a92:	d10e      	bne.n	ab2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     a94:	7b03      	ldrb	r3, [r0, #12]
     a96:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     a98:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     a9a:	4313      	orrs	r3, r2
     a9c:	89c2      	ldrh	r2, [r0, #14]
     a9e:	0412      	lsls	r2, r2, #16
     aa0:	490d      	ldr	r1, [pc, #52]	; (ad8 <system_clock_source_dfll_set_config+0x78>)
     aa2:	400a      	ands	r2, r1
     aa4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     aa6:	4a0b      	ldr	r2, [pc, #44]	; (ad4 <system_clock_source_dfll_set_config+0x74>)
     aa8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     aaa:	6811      	ldr	r1, [r2, #0]
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <system_clock_source_dfll_set_config+0x7c>)
     aae:	430b      	orrs	r3, r1
     ab0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     ab2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ab4:	7b03      	ldrb	r3, [r0, #12]
     ab6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     ab8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     aba:	4313      	orrs	r3, r2
     abc:	89c2      	ldrh	r2, [r0, #14]
     abe:	0412      	lsls	r2, r2, #16
     ac0:	4905      	ldr	r1, [pc, #20]	; (ad8 <system_clock_source_dfll_set_config+0x78>)
     ac2:	400a      	ands	r2, r1
     ac4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     ac6:	4a03      	ldr	r2, [pc, #12]	; (ad4 <system_clock_source_dfll_set_config+0x74>)
     ac8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     aca:	6813      	ldr	r3, [r2, #0]
     acc:	2104      	movs	r1, #4
     ace:	430b      	orrs	r3, r1
     ad0:	6013      	str	r3, [r2, #0]
     ad2:	e7ee      	b.n	ab2 <system_clock_source_dfll_set_config+0x52>
     ad4:	200000a0 	.word	0x200000a0
     ad8:	03ff0000 	.word	0x03ff0000
     adc:	00000424 	.word	0x00000424

00000ae0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ae0:	2808      	cmp	r0, #8
     ae2:	d803      	bhi.n	aec <system_clock_source_enable+0xc>
     ae4:	0080      	lsls	r0, r0, #2
     ae6:	4b25      	ldr	r3, [pc, #148]	; (b7c <system_clock_source_enable+0x9c>)
     ae8:	581b      	ldr	r3, [r3, r0]
     aea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     aec:	2017      	movs	r0, #23
     aee:	e044      	b.n	b7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     af0:	4a23      	ldr	r2, [pc, #140]	; (b80 <system_clock_source_enable+0xa0>)
     af2:	6a13      	ldr	r3, [r2, #32]
     af4:	2102      	movs	r1, #2
     af6:	430b      	orrs	r3, r1
     af8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     afa:	2000      	movs	r0, #0
     afc:	e03d      	b.n	b7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     afe:	4a20      	ldr	r2, [pc, #128]	; (b80 <system_clock_source_enable+0xa0>)
     b00:	6993      	ldr	r3, [r2, #24]
     b02:	2102      	movs	r1, #2
     b04:	430b      	orrs	r3, r1
     b06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     b08:	2000      	movs	r0, #0
		break;
     b0a:	e036      	b.n	b7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     b0c:	4a1c      	ldr	r2, [pc, #112]	; (b80 <system_clock_source_enable+0xa0>)
     b0e:	8a13      	ldrh	r3, [r2, #16]
     b10:	2102      	movs	r1, #2
     b12:	430b      	orrs	r3, r1
     b14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     b16:	2000      	movs	r0, #0
		break;
     b18:	e02f      	b.n	b7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     b1a:	4a19      	ldr	r2, [pc, #100]	; (b80 <system_clock_source_enable+0xa0>)
     b1c:	8a93      	ldrh	r3, [r2, #20]
     b1e:	2102      	movs	r1, #2
     b20:	430b      	orrs	r3, r1
     b22:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     b24:	2000      	movs	r0, #0
		break;
     b26:	e028      	b.n	b7a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b28:	4916      	ldr	r1, [pc, #88]	; (b84 <system_clock_source_enable+0xa4>)
     b2a:	680b      	ldr	r3, [r1, #0]
     b2c:	2202      	movs	r2, #2
     b2e:	4313      	orrs	r3, r2
     b30:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b32:	4b13      	ldr	r3, [pc, #76]	; (b80 <system_clock_source_enable+0xa0>)
     b34:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b36:	0019      	movs	r1, r3
     b38:	320e      	adds	r2, #14
     b3a:	68cb      	ldr	r3, [r1, #12]
     b3c:	421a      	tst	r2, r3
     b3e:	d0fc      	beq.n	b3a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     b40:	4a10      	ldr	r2, [pc, #64]	; (b84 <system_clock_source_enable+0xa4>)
     b42:	6891      	ldr	r1, [r2, #8]
     b44:	4b0e      	ldr	r3, [pc, #56]	; (b80 <system_clock_source_enable+0xa0>)
     b46:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     b48:	6852      	ldr	r2, [r2, #4]
     b4a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     b4c:	2200      	movs	r2, #0
     b4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b50:	0019      	movs	r1, r3
     b52:	3210      	adds	r2, #16
     b54:	68cb      	ldr	r3, [r1, #12]
     b56:	421a      	tst	r2, r3
     b58:	d0fc      	beq.n	b54 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     b5a:	4b0a      	ldr	r3, [pc, #40]	; (b84 <system_clock_source_enable+0xa4>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	b29b      	uxth	r3, r3
     b60:	4a07      	ldr	r2, [pc, #28]	; (b80 <system_clock_source_enable+0xa0>)
     b62:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     b64:	2000      	movs	r0, #0
     b66:	e008      	b.n	b7a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     b68:	4905      	ldr	r1, [pc, #20]	; (b80 <system_clock_source_enable+0xa0>)
     b6a:	2244      	movs	r2, #68	; 0x44
     b6c:	5c8b      	ldrb	r3, [r1, r2]
     b6e:	2002      	movs	r0, #2
     b70:	4303      	orrs	r3, r0
     b72:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     b74:	2000      	movs	r0, #0
		break;
     b76:	e000      	b.n	b7a <system_clock_source_enable+0x9a>
		return STATUS_OK;
     b78:	2000      	movs	r0, #0
}
     b7a:	4770      	bx	lr
     b7c:	00002134 	.word	0x00002134
     b80:	40000800 	.word	0x40000800
     b84:	200000a0 	.word	0x200000a0

00000b88 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8a:	46ce      	mov	lr, r9
     b8c:	4647      	mov	r7, r8
     b8e:	b580      	push	{r7, lr}
     b90:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     b92:	22c2      	movs	r2, #194	; 0xc2
     b94:	00d2      	lsls	r2, r2, #3
     b96:	4b50      	ldr	r3, [pc, #320]	; (cd8 <system_clock_init+0x150>)
     b98:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     b9a:	4a50      	ldr	r2, [pc, #320]	; (cdc <system_clock_init+0x154>)
     b9c:	6853      	ldr	r3, [r2, #4]
     b9e:	211e      	movs	r1, #30
     ba0:	438b      	bics	r3, r1
     ba2:	391c      	subs	r1, #28
     ba4:	430b      	orrs	r3, r1
     ba6:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
     ba8:	2203      	movs	r2, #3
     baa:	ab01      	add	r3, sp, #4
     bac:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     bae:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     bb0:	4d4b      	ldr	r5, [pc, #300]	; (ce0 <system_clock_init+0x158>)
     bb2:	b2e0      	uxtb	r0, r4
     bb4:	a901      	add	r1, sp, #4
     bb6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     bb8:	3401      	adds	r4, #1
     bba:	2c25      	cmp	r4, #37	; 0x25
     bbc:	d1f9      	bne.n	bb2 <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     bbe:	a80a      	add	r0, sp, #40	; 0x28
     bc0:	2300      	movs	r3, #0
     bc2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     bc4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     bc6:	2280      	movs	r2, #128	; 0x80
     bc8:	0212      	lsls	r2, r2, #8
     bca:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     bcc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     bce:	2201      	movs	r2, #1
     bd0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     bd2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     bd4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     bd6:	3205      	adds	r2, #5
     bd8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     bda:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     bdc:	4b41      	ldr	r3, [pc, #260]	; (ce4 <system_clock_init+0x15c>)
     bde:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     be0:	2005      	movs	r0, #5
     be2:	4b41      	ldr	r3, [pc, #260]	; (ce8 <system_clock_init+0x160>)
     be4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     be6:	493c      	ldr	r1, [pc, #240]	; (cd8 <system_clock_init+0x150>)
     be8:	2202      	movs	r2, #2
     bea:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     bec:	421a      	tst	r2, r3
     bee:	d0fc      	beq.n	bea <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     bf0:	4a39      	ldr	r2, [pc, #228]	; (cd8 <system_clock_init+0x150>)
     bf2:	8a93      	ldrh	r3, [r2, #20]
     bf4:	2180      	movs	r1, #128	; 0x80
     bf6:	430b      	orrs	r3, r1
     bf8:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     bfa:	ab05      	add	r3, sp, #20
     bfc:	2100      	movs	r1, #0
     bfe:	2200      	movs	r2, #0
     c00:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     c02:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     c04:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     c06:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     c08:	313f      	adds	r1, #63	; 0x3f
     c0a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     c0c:	393b      	subs	r1, #59	; 0x3b
     c0e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     c10:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     c12:	4b36      	ldr	r3, [pc, #216]	; (cec <system_clock_init+0x164>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     c18:	2b3f      	cmp	r3, #63	; 0x3f
     c1a:	d05b      	beq.n	cd4 <system_clock_init+0x14c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     c1c:	a805      	add	r0, sp, #20
     c1e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     c20:	23b7      	movs	r3, #183	; 0xb7
     c22:	00db      	lsls	r3, r3, #3
     c24:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     c26:	2307      	movs	r3, #7
     c28:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     c2a:	3338      	adds	r3, #56	; 0x38
     c2c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     c2e:	4b30      	ldr	r3, [pc, #192]	; (cf0 <system_clock_init+0x168>)
     c30:	4798      	blx	r3
	config->run_in_standby  = false;
     c32:	a804      	add	r0, sp, #16
     c34:	2500      	movs	r5, #0
     c36:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     c38:	2601      	movs	r6, #1
     c3a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     c3c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     c3e:	4b2d      	ldr	r3, [pc, #180]	; (cf4 <system_clock_init+0x16c>)
     c40:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     c42:	2006      	movs	r0, #6
     c44:	4f28      	ldr	r7, [pc, #160]	; (ce8 <system_clock_init+0x160>)
     c46:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     c48:	4b2b      	ldr	r3, [pc, #172]	; (cf8 <system_clock_init+0x170>)
     c4a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     c4c:	ac01      	add	r4, sp, #4
     c4e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     c50:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     c52:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     c54:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     c56:	2305      	movs	r3, #5
     c58:	7023      	strb	r3, [r4, #0]
     c5a:	0021      	movs	r1, r4
     c5c:	2001      	movs	r0, #1
     c5e:	4b27      	ldr	r3, [pc, #156]	; (cfc <system_clock_init+0x174>)
     c60:	4699      	mov	r9, r3
     c62:	4798      	blx	r3
     c64:	2001      	movs	r0, #1
     c66:	4b26      	ldr	r3, [pc, #152]	; (d00 <system_clock_init+0x178>)
     c68:	4698      	mov	r8, r3
     c6a:	4798      	blx	r3
	config->division_factor    = 1;
     c6c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
     c6e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     c70:	2306      	movs	r3, #6
     c72:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
     c74:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     c76:	7265      	strb	r5, [r4, #9]
     c78:	0021      	movs	r1, r4
     c7a:	2002      	movs	r0, #2
     c7c:	47c8      	blx	r9
     c7e:	2002      	movs	r0, #2
     c80:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     c82:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     c84:	0021      	movs	r1, r4
     c86:	2000      	movs	r0, #0
     c88:	4b15      	ldr	r3, [pc, #84]	; (ce0 <system_clock_init+0x158>)
     c8a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     c8c:	2000      	movs	r0, #0
     c8e:	4b1d      	ldr	r3, [pc, #116]	; (d04 <system_clock_init+0x17c>)
     c90:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     c92:	2007      	movs	r0, #7
     c94:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     c96:	4910      	ldr	r1, [pc, #64]	; (cd8 <system_clock_init+0x150>)
     c98:	22d0      	movs	r2, #208	; 0xd0
     c9a:	68cb      	ldr	r3, [r1, #12]
     c9c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     c9e:	2bd0      	cmp	r3, #208	; 0xd0
     ca0:	d1fb      	bne.n	c9a <system_clock_init+0x112>
	PM->CPUSEL.reg = (uint32_t)divider;
     ca2:	4a19      	ldr	r2, [pc, #100]	; (d08 <system_clock_init+0x180>)
     ca4:	2300      	movs	r3, #0
     ca6:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     ca8:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     caa:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     cac:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     cae:	a901      	add	r1, sp, #4
     cb0:	2201      	movs	r2, #1
     cb2:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     cb4:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
     cb6:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     cb8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     cba:	3307      	adds	r3, #7
     cbc:	700b      	strb	r3, [r1, #0]
     cbe:	2000      	movs	r0, #0
     cc0:	4b0e      	ldr	r3, [pc, #56]	; (cfc <system_clock_init+0x174>)
     cc2:	4798      	blx	r3
     cc4:	2000      	movs	r0, #0
     cc6:	4b0e      	ldr	r3, [pc, #56]	; (d00 <system_clock_init+0x178>)
     cc8:	4798      	blx	r3
#endif
}
     cca:	b00f      	add	sp, #60	; 0x3c
     ccc:	bc0c      	pop	{r2, r3}
     cce:	4690      	mov	r8, r2
     cd0:	4699      	mov	r9, r3
     cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     cd4:	3b20      	subs	r3, #32
     cd6:	e7a1      	b.n	c1c <system_clock_init+0x94>
     cd8:	40000800 	.word	0x40000800
     cdc:	41004000 	.word	0x41004000
     ce0:	00000f45 	.word	0x00000f45
     ce4:	000009a9 	.word	0x000009a9
     ce8:	00000ae1 	.word	0x00000ae1
     cec:	00806024 	.word	0x00806024
     cf0:	00000a61 	.word	0x00000a61
     cf4:	0000096d 	.word	0x0000096d
     cf8:	00000d0d 	.word	0x00000d0d
     cfc:	00000d31 	.word	0x00000d31
     d00:	00000de9 	.word	0x00000de9
     d04:	00000eb9 	.word	0x00000eb9
     d08:	40000400 	.word	0x40000400

00000d0c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d0c:	4a06      	ldr	r2, [pc, #24]	; (d28 <system_gclk_init+0x1c>)
     d0e:	6993      	ldr	r3, [r2, #24]
     d10:	2108      	movs	r1, #8
     d12:	430b      	orrs	r3, r1
     d14:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d16:	2201      	movs	r2, #1
     d18:	4b04      	ldr	r3, [pc, #16]	; (d2c <system_gclk_init+0x20>)
     d1a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d1c:	0019      	movs	r1, r3
     d1e:	780b      	ldrb	r3, [r1, #0]
     d20:	4213      	tst	r3, r2
     d22:	d1fc      	bne.n	d1e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d24:	4770      	bx	lr
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40000400 	.word	0x40000400
     d2c:	40000c00 	.word	0x40000c00

00000d30 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d30:	b570      	push	{r4, r5, r6, lr}
     d32:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d34:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d36:	780d      	ldrb	r5, [r1, #0]
     d38:	022d      	lsls	r5, r5, #8
     d3a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d3c:	784b      	ldrb	r3, [r1, #1]
     d3e:	2b00      	cmp	r3, #0
     d40:	d002      	beq.n	d48 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d42:	2380      	movs	r3, #128	; 0x80
     d44:	02db      	lsls	r3, r3, #11
     d46:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d48:	7a4b      	ldrb	r3, [r1, #9]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d002      	beq.n	d54 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d4e:	2380      	movs	r3, #128	; 0x80
     d50:	031b      	lsls	r3, r3, #12
     d52:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d54:	6848      	ldr	r0, [r1, #4]
     d56:	2801      	cmp	r0, #1
     d58:	d910      	bls.n	d7c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d5a:	1e43      	subs	r3, r0, #1
     d5c:	4218      	tst	r0, r3
     d5e:	d134      	bne.n	dca <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d60:	2802      	cmp	r0, #2
     d62:	d930      	bls.n	dc6 <system_gclk_gen_set_config+0x96>
     d64:	2302      	movs	r3, #2
     d66:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     d68:	3201      	adds	r2, #1
						mask <<= 1) {
     d6a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     d6c:	4298      	cmp	r0, r3
     d6e:	d8fb      	bhi.n	d68 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     d70:	0212      	lsls	r2, r2, #8
     d72:	4332      	orrs	r2, r6
     d74:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     d76:	2380      	movs	r3, #128	; 0x80
     d78:	035b      	lsls	r3, r3, #13
     d7a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     d7c:	7a0b      	ldrb	r3, [r1, #8]
     d7e:	2b00      	cmp	r3, #0
     d80:	d002      	beq.n	d88 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     d82:	2380      	movs	r3, #128	; 0x80
     d84:	039b      	lsls	r3, r3, #14
     d86:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     d88:	4a13      	ldr	r2, [pc, #76]	; (dd8 <system_gclk_gen_set_config+0xa8>)
     d8a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     d8c:	b25b      	sxtb	r3, r3
     d8e:	2b00      	cmp	r3, #0
     d90:	dbfb      	blt.n	d8a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d92:	4b12      	ldr	r3, [pc, #72]	; (ddc <system_gclk_gen_set_config+0xac>)
     d94:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     d96:	4b12      	ldr	r3, [pc, #72]	; (de0 <system_gclk_gen_set_config+0xb0>)
     d98:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     d9a:	4a0f      	ldr	r2, [pc, #60]	; (dd8 <system_gclk_gen_set_config+0xa8>)
     d9c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     d9e:	b25b      	sxtb	r3, r3
     da0:	2b00      	cmp	r3, #0
     da2:	dbfb      	blt.n	d9c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     da4:	4b0c      	ldr	r3, [pc, #48]	; (dd8 <system_gclk_gen_set_config+0xa8>)
     da6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     da8:	001a      	movs	r2, r3
     daa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     dac:	b25b      	sxtb	r3, r3
     dae:	2b00      	cmp	r3, #0
     db0:	dbfb      	blt.n	daa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     db2:	4a09      	ldr	r2, [pc, #36]	; (dd8 <system_gclk_gen_set_config+0xa8>)
     db4:	6853      	ldr	r3, [r2, #4]
     db6:	2180      	movs	r1, #128	; 0x80
     db8:	0249      	lsls	r1, r1, #9
     dba:	400b      	ands	r3, r1
     dbc:	431d      	orrs	r5, r3
     dbe:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <system_gclk_gen_set_config+0xb4>)
     dc2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     dc4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     dc6:	2200      	movs	r2, #0
     dc8:	e7d2      	b.n	d70 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     dca:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     dcc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     dce:	2380      	movs	r3, #128	; 0x80
     dd0:	029b      	lsls	r3, r3, #10
     dd2:	431d      	orrs	r5, r3
     dd4:	e7d2      	b.n	d7c <system_gclk_gen_set_config+0x4c>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	40000c00 	.word	0x40000c00
     ddc:	0000080d 	.word	0x0000080d
     de0:	40000c08 	.word	0x40000c08
     de4:	0000084d 	.word	0x0000084d

00000de8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     de8:	b510      	push	{r4, lr}
     dea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dec:	4a0b      	ldr	r2, [pc, #44]	; (e1c <system_gclk_gen_enable+0x34>)
     dee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     df0:	b25b      	sxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	dbfb      	blt.n	dee <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     df6:	4b0a      	ldr	r3, [pc, #40]	; (e20 <system_gclk_gen_enable+0x38>)
     df8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <system_gclk_gen_enable+0x3c>)
     dfc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dfe:	4a07      	ldr	r2, [pc, #28]	; (e1c <system_gclk_gen_enable+0x34>)
     e00:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e02:	b25b      	sxtb	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	dbfb      	blt.n	e00 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e08:	4a04      	ldr	r2, [pc, #16]	; (e1c <system_gclk_gen_enable+0x34>)
     e0a:	6851      	ldr	r1, [r2, #4]
     e0c:	2380      	movs	r3, #128	; 0x80
     e0e:	025b      	lsls	r3, r3, #9
     e10:	430b      	orrs	r3, r1
     e12:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e14:	4b04      	ldr	r3, [pc, #16]	; (e28 <system_gclk_gen_enable+0x40>)
     e16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e18:	bd10      	pop	{r4, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	40000c00 	.word	0x40000c00
     e20:	0000080d 	.word	0x0000080d
     e24:	40000c04 	.word	0x40000c04
     e28:	0000084d 	.word	0x0000084d

00000e2c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e2c:	b570      	push	{r4, r5, r6, lr}
     e2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e30:	4a1a      	ldr	r2, [pc, #104]	; (e9c <system_gclk_gen_get_hz+0x70>)
     e32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e34:	b25b      	sxtb	r3, r3
     e36:	2b00      	cmp	r3, #0
     e38:	dbfb      	blt.n	e32 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e3a:	4b19      	ldr	r3, [pc, #100]	; (ea0 <system_gclk_gen_get_hz+0x74>)
     e3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e3e:	4b19      	ldr	r3, [pc, #100]	; (ea4 <system_gclk_gen_get_hz+0x78>)
     e40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e42:	4a16      	ldr	r2, [pc, #88]	; (e9c <system_gclk_gen_get_hz+0x70>)
     e44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e46:	b25b      	sxtb	r3, r3
     e48:	2b00      	cmp	r3, #0
     e4a:	dbfb      	blt.n	e44 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e4c:	4e13      	ldr	r6, [pc, #76]	; (e9c <system_gclk_gen_get_hz+0x70>)
     e4e:	6870      	ldr	r0, [r6, #4]
     e50:	04c0      	lsls	r0, r0, #19
     e52:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e54:	4b14      	ldr	r3, [pc, #80]	; (ea8 <system_gclk_gen_get_hz+0x7c>)
     e56:	4798      	blx	r3
     e58:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e5a:	4b12      	ldr	r3, [pc, #72]	; (ea4 <system_gclk_gen_get_hz+0x78>)
     e5c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     e5e:	6876      	ldr	r6, [r6, #4]
     e60:	02f6      	lsls	r6, r6, #11
     e62:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e64:	4b11      	ldr	r3, [pc, #68]	; (eac <system_gclk_gen_get_hz+0x80>)
     e66:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e68:	4a0c      	ldr	r2, [pc, #48]	; (e9c <system_gclk_gen_get_hz+0x70>)
     e6a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e6c:	b25b      	sxtb	r3, r3
     e6e:	2b00      	cmp	r3, #0
     e70:	dbfb      	blt.n	e6a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     e72:	4b0a      	ldr	r3, [pc, #40]	; (e9c <system_gclk_gen_get_hz+0x70>)
     e74:	689c      	ldr	r4, [r3, #8]
     e76:	0224      	lsls	r4, r4, #8
     e78:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     e7a:	4b0d      	ldr	r3, [pc, #52]	; (eb0 <system_gclk_gen_get_hz+0x84>)
     e7c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     e7e:	2e00      	cmp	r6, #0
     e80:	d107      	bne.n	e92 <system_gclk_gen_get_hz+0x66>
     e82:	2c01      	cmp	r4, #1
     e84:	d907      	bls.n	e96 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     e86:	0021      	movs	r1, r4
     e88:	0028      	movs	r0, r5
     e8a:	4b0a      	ldr	r3, [pc, #40]	; (eb4 <system_gclk_gen_get_hz+0x88>)
     e8c:	4798      	blx	r3
     e8e:	0005      	movs	r5, r0
     e90:	e001      	b.n	e96 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     e92:	3401      	adds	r4, #1
     e94:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     e96:	0028      	movs	r0, r5
     e98:	bd70      	pop	{r4, r5, r6, pc}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	40000c00 	.word	0x40000c00
     ea0:	0000080d 	.word	0x0000080d
     ea4:	40000c04 	.word	0x40000c04
     ea8:	000008d9 	.word	0x000008d9
     eac:	40000c08 	.word	0x40000c08
     eb0:	0000084d 	.word	0x0000084d
     eb4:	00001425 	.word	0x00001425

00000eb8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     eb8:	b510      	push	{r4, lr}
     eba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ebc:	4b06      	ldr	r3, [pc, #24]	; (ed8 <system_gclk_chan_enable+0x20>)
     ebe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ec0:	4b06      	ldr	r3, [pc, #24]	; (edc <system_gclk_chan_enable+0x24>)
     ec2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     ec4:	4a06      	ldr	r2, [pc, #24]	; (ee0 <system_gclk_chan_enable+0x28>)
     ec6:	8853      	ldrh	r3, [r2, #2]
     ec8:	2180      	movs	r1, #128	; 0x80
     eca:	01c9      	lsls	r1, r1, #7
     ecc:	430b      	orrs	r3, r1
     ece:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     ed0:	4b04      	ldr	r3, [pc, #16]	; (ee4 <system_gclk_chan_enable+0x2c>)
     ed2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ed4:	bd10      	pop	{r4, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	0000080d 	.word	0x0000080d
     edc:	40000c02 	.word	0x40000c02
     ee0:	40000c00 	.word	0x40000c00
     ee4:	0000084d 	.word	0x0000084d

00000ee8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     ee8:	b510      	push	{r4, lr}
     eea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     eec:	4b0f      	ldr	r3, [pc, #60]	; (f2c <system_gclk_chan_disable+0x44>)
     eee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ef0:	4b0f      	ldr	r3, [pc, #60]	; (f30 <system_gclk_chan_disable+0x48>)
     ef2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     ef4:	4a0f      	ldr	r2, [pc, #60]	; (f34 <system_gclk_chan_disable+0x4c>)
     ef6:	8853      	ldrh	r3, [r2, #2]
     ef8:	051b      	lsls	r3, r3, #20
     efa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     efc:	8853      	ldrh	r3, [r2, #2]
     efe:	490e      	ldr	r1, [pc, #56]	; (f38 <system_gclk_chan_disable+0x50>)
     f00:	400b      	ands	r3, r1
     f02:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f04:	8853      	ldrh	r3, [r2, #2]
     f06:	490d      	ldr	r1, [pc, #52]	; (f3c <system_gclk_chan_disable+0x54>)
     f08:	400b      	ands	r3, r1
     f0a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f0c:	0011      	movs	r1, r2
     f0e:	2280      	movs	r2, #128	; 0x80
     f10:	01d2      	lsls	r2, r2, #7
     f12:	884b      	ldrh	r3, [r1, #2]
     f14:	4213      	tst	r3, r2
     f16:	d1fc      	bne.n	f12 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f18:	4906      	ldr	r1, [pc, #24]	; (f34 <system_gclk_chan_disable+0x4c>)
     f1a:	884a      	ldrh	r2, [r1, #2]
     f1c:	0203      	lsls	r3, r0, #8
     f1e:	4806      	ldr	r0, [pc, #24]	; (f38 <system_gclk_chan_disable+0x50>)
     f20:	4002      	ands	r2, r0
     f22:	4313      	orrs	r3, r2
     f24:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <system_gclk_chan_disable+0x58>)
     f28:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f2a:	bd10      	pop	{r4, pc}
     f2c:	0000080d 	.word	0x0000080d
     f30:	40000c02 	.word	0x40000c02
     f34:	40000c00 	.word	0x40000c00
     f38:	fffff0ff 	.word	0xfffff0ff
     f3c:	ffffbfff 	.word	0xffffbfff
     f40:	0000084d 	.word	0x0000084d

00000f44 <system_gclk_chan_set_config>:
{
     f44:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f46:	780c      	ldrb	r4, [r1, #0]
     f48:	0224      	lsls	r4, r4, #8
     f4a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     f4c:	4b02      	ldr	r3, [pc, #8]	; (f58 <system_gclk_chan_set_config+0x14>)
     f4e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f50:	b2a4      	uxth	r4, r4
     f52:	4b02      	ldr	r3, [pc, #8]	; (f5c <system_gclk_chan_set_config+0x18>)
     f54:	805c      	strh	r4, [r3, #2]
}
     f56:	bd10      	pop	{r4, pc}
     f58:	00000ee9 	.word	0x00000ee9
     f5c:	40000c00 	.word	0x40000c00

00000f60 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     f60:	b510      	push	{r4, lr}
     f62:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f64:	4b06      	ldr	r3, [pc, #24]	; (f80 <system_gclk_chan_get_hz+0x20>)
     f66:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f68:	4b06      	ldr	r3, [pc, #24]	; (f84 <system_gclk_chan_get_hz+0x24>)
     f6a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     f6c:	4b06      	ldr	r3, [pc, #24]	; (f88 <system_gclk_chan_get_hz+0x28>)
     f6e:	885c      	ldrh	r4, [r3, #2]
     f70:	0524      	lsls	r4, r4, #20
     f72:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     f74:	4b05      	ldr	r3, [pc, #20]	; (f8c <system_gclk_chan_get_hz+0x2c>)
     f76:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     f78:	0020      	movs	r0, r4
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <system_gclk_chan_get_hz+0x30>)
     f7c:	4798      	blx	r3
}
     f7e:	bd10      	pop	{r4, pc}
     f80:	0000080d 	.word	0x0000080d
     f84:	40000c02 	.word	0x40000c02
     f88:	40000c00 	.word	0x40000c00
     f8c:	0000084d 	.word	0x0000084d
     f90:	00000e2d 	.word	0x00000e2d

00000f94 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
     f94:	b570      	push	{r4, r5, r6, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
     f96:	2800      	cmp	r0, #0
     f98:	db1c      	blt.n	fd4 <system_interrupt_set_priority+0x40>
		uint8_t register_num = vector / 4;
     f9a:	17c3      	asrs	r3, r0, #31
     f9c:	2603      	movs	r6, #3
     f9e:	0032      	movs	r2, r6
     fa0:	401a      	ands	r2, r3
     fa2:	1812      	adds	r2, r2, r0
     fa4:	24ff      	movs	r4, #255	; 0xff
     fa6:	00a4      	lsls	r4, r4, #2
     fa8:	4022      	ands	r2, r4
     faa:	4c0e      	ldr	r4, [pc, #56]	; (fe4 <system_interrupt_set_priority+0x50>)
     fac:	46a4      	mov	ip, r4
     fae:	4462      	add	r2, ip
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
     fb0:	25c0      	movs	r5, #192	; 0xc0
     fb2:	00ad      	lsls	r5, r5, #2
     fb4:	5954      	ldr	r4, [r2, r5]
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
     fb6:	0f9b      	lsrs	r3, r3, #30
     fb8:	18c0      	adds	r0, r0, r3
     fba:	4030      	ands	r0, r6
     fbc:	1ac3      	subs	r3, r0, r3
     fbe:	00db      	lsls	r3, r3, #3
     fc0:	3306      	adds	r3, #6
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
     fc2:	b2db      	uxtb	r3, r3
     fc4:	409e      	lsls	r6, r3
     fc6:	43b4      	bics	r4, r6
				(priority_level << priority_pos);
     fc8:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
     fca:	4321      	orrs	r1, r4
		NVIC->IP[register_num] =
     fcc:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
     fce:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
     fd0:	0018      	movs	r0, r3
     fd2:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_ERR_INVALID_ARG;
     fd4:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
     fd6:	1c42      	adds	r2, r0, #1
     fd8:	d1fa      	bne.n	fd0 <system_interrupt_set_priority+0x3c>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
     fda:	0789      	lsls	r1, r1, #30
     fdc:	4b02      	ldr	r3, [pc, #8]	; (fe8 <system_interrupt_set_priority+0x54>)
     fde:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
     fe0:	2300      	movs	r3, #0
     fe2:	e7f5      	b.n	fd0 <system_interrupt_set_priority+0x3c>
     fe4:	e000e100 	.word	0xe000e100
     fe8:	e000ed00 	.word	0xe000ed00

00000fec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     fec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     fee:	78d3      	ldrb	r3, [r2, #3]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d135      	bne.n	1060 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     ff4:	7813      	ldrb	r3, [r2, #0]
     ff6:	2b80      	cmp	r3, #128	; 0x80
     ff8:	d029      	beq.n	104e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     ffa:	061b      	lsls	r3, r3, #24
     ffc:	2480      	movs	r4, #128	; 0x80
     ffe:	0264      	lsls	r4, r4, #9
    1000:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1002:	7854      	ldrb	r4, [r2, #1]
    1004:	2502      	movs	r5, #2
    1006:	43ac      	bics	r4, r5
    1008:	d106      	bne.n	1018 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    100a:	7894      	ldrb	r4, [r2, #2]
    100c:	2c00      	cmp	r4, #0
    100e:	d120      	bne.n	1052 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1010:	2480      	movs	r4, #128	; 0x80
    1012:	02a4      	lsls	r4, r4, #10
    1014:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1016:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1018:	7854      	ldrb	r4, [r2, #1]
    101a:	3c01      	subs	r4, #1
    101c:	2c01      	cmp	r4, #1
    101e:	d91c      	bls.n	105a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1020:	040d      	lsls	r5, r1, #16
    1022:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1024:	24a0      	movs	r4, #160	; 0xa0
    1026:	05e4      	lsls	r4, r4, #23
    1028:	432c      	orrs	r4, r5
    102a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    102c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    102e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1030:	24d0      	movs	r4, #208	; 0xd0
    1032:	0624      	lsls	r4, r4, #24
    1034:	432c      	orrs	r4, r5
    1036:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1038:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    103a:	78d4      	ldrb	r4, [r2, #3]
    103c:	2c00      	cmp	r4, #0
    103e:	d122      	bne.n	1086 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1040:	035b      	lsls	r3, r3, #13
    1042:	d51c      	bpl.n	107e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1044:	7893      	ldrb	r3, [r2, #2]
    1046:	2b01      	cmp	r3, #1
    1048:	d01e      	beq.n	1088 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    104a:	6141      	str	r1, [r0, #20]
    104c:	e017      	b.n	107e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    104e:	2300      	movs	r3, #0
    1050:	e7d7      	b.n	1002 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1052:	24c0      	movs	r4, #192	; 0xc0
    1054:	02e4      	lsls	r4, r4, #11
    1056:	4323      	orrs	r3, r4
    1058:	e7dd      	b.n	1016 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    105a:	4c0d      	ldr	r4, [pc, #52]	; (1090 <_system_pinmux_config+0xa4>)
    105c:	4023      	ands	r3, r4
    105e:	e7df      	b.n	1020 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1060:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1062:	040c      	lsls	r4, r1, #16
    1064:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1066:	23a0      	movs	r3, #160	; 0xa0
    1068:	05db      	lsls	r3, r3, #23
    106a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    106c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    106e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1070:	23d0      	movs	r3, #208	; 0xd0
    1072:	061b      	lsls	r3, r3, #24
    1074:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1076:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1078:	78d3      	ldrb	r3, [r2, #3]
    107a:	2b00      	cmp	r3, #0
    107c:	d103      	bne.n	1086 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    107e:	7853      	ldrb	r3, [r2, #1]
    1080:	3b01      	subs	r3, #1
    1082:	2b01      	cmp	r3, #1
    1084:	d902      	bls.n	108c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1086:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1088:	6181      	str	r1, [r0, #24]
    108a:	e7f8      	b.n	107e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    108c:	6081      	str	r1, [r0, #8]
}
    108e:	e7fa      	b.n	1086 <_system_pinmux_config+0x9a>
    1090:	fffbffff 	.word	0xfffbffff

00001094 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1094:	b510      	push	{r4, lr}
    1096:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1098:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    109a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    109c:	2900      	cmp	r1, #0
    109e:	d104      	bne.n	10aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10a0:	0943      	lsrs	r3, r0, #5
    10a2:	01db      	lsls	r3, r3, #7
    10a4:	4905      	ldr	r1, [pc, #20]	; (10bc <system_pinmux_pin_set_config+0x28>)
    10a6:	468c      	mov	ip, r1
    10a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10aa:	241f      	movs	r4, #31
    10ac:	4020      	ands	r0, r4
    10ae:	2101      	movs	r1, #1
    10b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    10b2:	0018      	movs	r0, r3
    10b4:	4b02      	ldr	r3, [pc, #8]	; (10c0 <system_pinmux_pin_set_config+0x2c>)
    10b6:	4798      	blx	r3
}
    10b8:	bd10      	pop	{r4, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	41004400 	.word	0x41004400
    10c0:	00000fed 	.word	0x00000fed

000010c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10c4:	4770      	bx	lr
	...

000010c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10ca:	4b05      	ldr	r3, [pc, #20]	; (10e0 <system_init+0x18>)
    10cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10ce:	4b05      	ldr	r3, [pc, #20]	; (10e4 <system_init+0x1c>)
    10d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10d2:	4b05      	ldr	r3, [pc, #20]	; (10e8 <system_init+0x20>)
    10d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <system_init+0x24>)
    10d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <system_init+0x28>)
    10dc:	4798      	blx	r3
}
    10de:	bd10      	pop	{r4, pc}
    10e0:	00000b89 	.word	0x00000b89
    10e4:	0000087d 	.word	0x0000087d
    10e8:	000010c5 	.word	0x000010c5
    10ec:	000010c5 	.word	0x000010c5
    10f0:	000010c5 	.word	0x000010c5

000010f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    10f4:	e7fe      	b.n	10f4 <Dummy_Handler>
	...

000010f8 <Reset_Handler>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    10fa:	4a2a      	ldr	r2, [pc, #168]	; (11a4 <Reset_Handler+0xac>)
    10fc:	4b2a      	ldr	r3, [pc, #168]	; (11a8 <Reset_Handler+0xb0>)
    10fe:	429a      	cmp	r2, r3
    1100:	d011      	beq.n	1126 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1102:	001a      	movs	r2, r3
    1104:	4b29      	ldr	r3, [pc, #164]	; (11ac <Reset_Handler+0xb4>)
    1106:	429a      	cmp	r2, r3
    1108:	d20d      	bcs.n	1126 <Reset_Handler+0x2e>
    110a:	4a29      	ldr	r2, [pc, #164]	; (11b0 <Reset_Handler+0xb8>)
    110c:	3303      	adds	r3, #3
    110e:	1a9b      	subs	r3, r3, r2
    1110:	089b      	lsrs	r3, r3, #2
    1112:	3301      	adds	r3, #1
    1114:	009b      	lsls	r3, r3, #2
    1116:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1118:	4823      	ldr	r0, [pc, #140]	; (11a8 <Reset_Handler+0xb0>)
    111a:	4922      	ldr	r1, [pc, #136]	; (11a4 <Reset_Handler+0xac>)
    111c:	588c      	ldr	r4, [r1, r2]
    111e:	5084      	str	r4, [r0, r2]
    1120:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1122:	429a      	cmp	r2, r3
    1124:	d1fa      	bne.n	111c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1126:	4a23      	ldr	r2, [pc, #140]	; (11b4 <Reset_Handler+0xbc>)
    1128:	4b23      	ldr	r3, [pc, #140]	; (11b8 <Reset_Handler+0xc0>)
    112a:	429a      	cmp	r2, r3
    112c:	d20a      	bcs.n	1144 <Reset_Handler+0x4c>
    112e:	43d3      	mvns	r3, r2
    1130:	4921      	ldr	r1, [pc, #132]	; (11b8 <Reset_Handler+0xc0>)
    1132:	185b      	adds	r3, r3, r1
    1134:	2103      	movs	r1, #3
    1136:	438b      	bics	r3, r1
    1138:	3304      	adds	r3, #4
    113a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    113c:	2100      	movs	r1, #0
    113e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1140:	4293      	cmp	r3, r2
    1142:	d1fc      	bne.n	113e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1144:	4a1d      	ldr	r2, [pc, #116]	; (11bc <Reset_Handler+0xc4>)
    1146:	21ff      	movs	r1, #255	; 0xff
    1148:	4b1d      	ldr	r3, [pc, #116]	; (11c0 <Reset_Handler+0xc8>)
    114a:	438b      	bics	r3, r1
    114c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    114e:	39fd      	subs	r1, #253	; 0xfd
    1150:	2390      	movs	r3, #144	; 0x90
    1152:	005b      	lsls	r3, r3, #1
    1154:	4a1b      	ldr	r2, [pc, #108]	; (11c4 <Reset_Handler+0xcc>)
    1156:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1158:	4a1b      	ldr	r2, [pc, #108]	; (11c8 <Reset_Handler+0xd0>)
    115a:	78d3      	ldrb	r3, [r2, #3]
    115c:	2503      	movs	r5, #3
    115e:	43ab      	bics	r3, r5
    1160:	2402      	movs	r4, #2
    1162:	4323      	orrs	r3, r4
    1164:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1166:	78d3      	ldrb	r3, [r2, #3]
    1168:	270c      	movs	r7, #12
    116a:	43bb      	bics	r3, r7
    116c:	2608      	movs	r6, #8
    116e:	4333      	orrs	r3, r6
    1170:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1172:	4b16      	ldr	r3, [pc, #88]	; (11cc <Reset_Handler+0xd4>)
    1174:	7b98      	ldrb	r0, [r3, #14]
    1176:	2230      	movs	r2, #48	; 0x30
    1178:	4390      	bics	r0, r2
    117a:	2220      	movs	r2, #32
    117c:	4310      	orrs	r0, r2
    117e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1180:	7b99      	ldrb	r1, [r3, #14]
    1182:	43b9      	bics	r1, r7
    1184:	4331      	orrs	r1, r6
    1186:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1188:	7b9a      	ldrb	r2, [r3, #14]
    118a:	43aa      	bics	r2, r5
    118c:	4322      	orrs	r2, r4
    118e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1190:	4a0f      	ldr	r2, [pc, #60]	; (11d0 <Reset_Handler+0xd8>)
    1192:	6853      	ldr	r3, [r2, #4]
    1194:	2180      	movs	r1, #128	; 0x80
    1196:	430b      	orrs	r3, r1
    1198:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    119a:	4b0e      	ldr	r3, [pc, #56]	; (11d4 <Reset_Handler+0xdc>)
    119c:	4798      	blx	r3
        main();
    119e:	4b0e      	ldr	r3, [pc, #56]	; (11d8 <Reset_Handler+0xe0>)
    11a0:	4798      	blx	r3
    11a2:	e7fe      	b.n	11a2 <Reset_Handler+0xaa>
    11a4:	000021c8 	.word	0x000021c8
    11a8:	20000000 	.word	0x20000000
    11ac:	2000007c 	.word	0x2000007c
    11b0:	20000004 	.word	0x20000004
    11b4:	2000007c 	.word	0x2000007c
    11b8:	20000168 	.word	0x20000168
    11bc:	e000ed00 	.word	0xe000ed00
    11c0:	00000000 	.word	0x00000000
    11c4:	41007000 	.word	0x41007000
    11c8:	41005000 	.word	0x41005000
    11cc:	41004800 	.word	0x41004800
    11d0:	41004000 	.word	0x41004000
    11d4:	00001751 	.word	0x00001751
    11d8:	0000132d 	.word	0x0000132d

000011dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    11dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11de:	4a06      	ldr	r2, [pc, #24]	; (11f8 <_sbrk+0x1c>)
    11e0:	6812      	ldr	r2, [r2, #0]
    11e2:	2a00      	cmp	r2, #0
    11e4:	d004      	beq.n	11f0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    11e6:	4a04      	ldr	r2, [pc, #16]	; (11f8 <_sbrk+0x1c>)
    11e8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    11ea:	18c3      	adds	r3, r0, r3
    11ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    11ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    11f0:	4902      	ldr	r1, [pc, #8]	; (11fc <_sbrk+0x20>)
    11f2:	4a01      	ldr	r2, [pc, #4]	; (11f8 <_sbrk+0x1c>)
    11f4:	6011      	str	r1, [r2, #0]
    11f6:	e7f6      	b.n	11e6 <_sbrk+0xa>
    11f8:	200000b8 	.word	0x200000b8
    11fc:	20002168 	.word	0x20002168

00001200 <adc_complete_callback>:
		i += 1;
	}
	
}

void adc_complete_callback(const struct adc_module *const module){
    1200:	b510      	push	{r4, lr}
	
	sprintf(str,"%d",*adc_result_buffer);
    1202:	4b0a      	ldr	r3, [pc, #40]	; (122c <adc_complete_callback+0x2c>)
    1204:	881a      	ldrh	r2, [r3, #0]
    1206:	4c0a      	ldr	r4, [pc, #40]	; (1230 <adc_complete_callback+0x30>)
    1208:	490a      	ldr	r1, [pc, #40]	; (1234 <adc_complete_callback+0x34>)
    120a:	0020      	movs	r0, r4
    120c:	4b0a      	ldr	r3, [pc, #40]	; (1238 <adc_complete_callback+0x38>)
    120e:	4798      	blx	r3
	uartWrite(str, 7);
    1210:	2107      	movs	r1, #7
    1212:	0020      	movs	r0, r4
    1214:	4b09      	ldr	r3, [pc, #36]	; (123c <adc_complete_callback+0x3c>)
    1216:	4798      	blx	r3
	memset(str, ' ', 5);
    1218:	2205      	movs	r2, #5
    121a:	2120      	movs	r1, #32
    121c:	0020      	movs	r0, r4
    121e:	4b08      	ldr	r3, [pc, #32]	; (1240 <adc_complete_callback+0x40>)
    1220:	4798      	blx	r3
	delay_ms(500);
    1222:	20fa      	movs	r0, #250	; 0xfa
    1224:	0040      	lsls	r0, r0, #1
    1226:	4b07      	ldr	r3, [pc, #28]	; (1244 <adc_complete_callback+0x44>)
    1228:	4798      	blx	r3
}
    122a:	bd10      	pop	{r4, pc}
    122c:	20000130 	.word	0x20000130
    1230:	20000010 	.word	0x20000010
    1234:	00002158 	.word	0x00002158
    1238:	000017bd 	.word	0x000017bd
    123c:	00000765 	.word	0x00000765
    1240:	000017ab 	.word	0x000017ab
    1244:	000007e1 	.word	0x000007e1

00001248 <USART_EYUP>:
void USART_EYUP(){
    1248:	b510      	push	{r4, lr}
	GelenData[i] = SERCOM3->USART.DATA.bit.DATA; // This flag is cleared by reading the Data register (DATA) or by disabling the receiver.
    124a:	4b0d      	ldr	r3, [pc, #52]	; (1280 <USART_EYUP+0x38>)
    124c:	7818      	ldrb	r0, [r3, #0]
    124e:	4b0d      	ldr	r3, [pc, #52]	; (1284 <USART_EYUP+0x3c>)
    1250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1252:	b2db      	uxtb	r3, r3
    1254:	4a0c      	ldr	r2, [pc, #48]	; (1288 <USART_EYUP+0x40>)
    1256:	5413      	strb	r3, [r2, r0]
	if (GelenData[i] == '\n')
    1258:	2b0a      	cmp	r3, #10
    125a:	d009      	beq.n	1270 <USART_EYUP+0x28>
		uartWrite(GelenData + i, 1);
    125c:	4b0a      	ldr	r3, [pc, #40]	; (1288 <USART_EYUP+0x40>)
    125e:	18c0      	adds	r0, r0, r3
    1260:	2101      	movs	r1, #1
    1262:	4b0a      	ldr	r3, [pc, #40]	; (128c <USART_EYUP+0x44>)
    1264:	4798      	blx	r3
		i += 1;
    1266:	4a06      	ldr	r2, [pc, #24]	; (1280 <USART_EYUP+0x38>)
    1268:	7813      	ldrb	r3, [r2, #0]
    126a:	3301      	adds	r3, #1
    126c:	7013      	strb	r3, [r2, #0]
}
    126e:	bd10      	pop	{r4, pc}
		uartWrite(GelenData + i, 1);
    1270:	1880      	adds	r0, r0, r2
    1272:	2101      	movs	r1, #1
    1274:	4b05      	ldr	r3, [pc, #20]	; (128c <USART_EYUP+0x44>)
    1276:	4798      	blx	r3
		i = 0;
    1278:	2200      	movs	r2, #0
    127a:	4b01      	ldr	r3, [pc, #4]	; (1280 <USART_EYUP+0x38>)
    127c:	701a      	strb	r2, [r3, #0]
    127e:	e7f6      	b.n	126e <USART_EYUP+0x26>
    1280:	200000bc 	.word	0x200000bc
    1284:	42001400 	.word	0x42001400
    1288:	200000cc 	.word	0x200000cc
    128c:	00000765 	.word	0x00000765

00001290 <configure_adc>:

void configure_adc(void)
{
    1290:	b510      	push	{r4, lr}
    1292:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    1294:	4668      	mov	r0, sp
    1296:	4b17      	ldr	r3, [pc, #92]	; (12f4 <configure_adc+0x64>)
    1298:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_2; // for 8 Mhz
    129a:	2302      	movs	r3, #2
    129c:	466a      	mov	r2, sp
    129e:	7013      	strb	r3, [r2, #0]
	config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    12a0:	22f0      	movs	r2, #240	; 0xf0
    12a2:	0512      	lsls	r2, r2, #20
    12a4:	9202      	str	r2, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV512;
    12a6:	22e0      	movs	r2, #224	; 0xe0
    12a8:	00d2      	lsls	r2, r2, #3
    12aa:	4669      	mov	r1, sp
    12ac:	804a      	strh	r2, [r1, #2]
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    12ae:	466a      	mov	r2, sp
    12b0:	704b      	strb	r3, [r1, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    12b2:	2300      	movs	r3, #0
    12b4:	730b      	strb	r3, [r1, #12]
	config_adc.resolution = ADC_RESOLUTION_10BIT;
    12b6:	3320      	adds	r3, #32
    12b8:	710b      	strb	r3, [r1, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    12ba:	4c0f      	ldr	r4, [pc, #60]	; (12f8 <configure_adc+0x68>)
    12bc:	490f      	ldr	r1, [pc, #60]	; (12fc <configure_adc+0x6c>)
    12be:	0020      	movs	r0, r4
    12c0:	4b0f      	ldr	r3, [pc, #60]	; (1300 <configure_adc+0x70>)
    12c2:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    12c4:	6822      	ldr	r2, [r4, #0]
    12c6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12c8:	b25b      	sxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	dbfb      	blt.n	12c6 <configure_adc+0x36>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12ce:	2180      	movs	r1, #128	; 0x80
    12d0:	0409      	lsls	r1, r1, #16
    12d2:	4b0c      	ldr	r3, [pc, #48]	; (1304 <configure_adc+0x74>)
    12d4:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    12d6:	230f      	movs	r3, #15
    12d8:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    12da:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    12dc:	7813      	ldrb	r3, [r2, #0]
    12de:	2102      	movs	r1, #2
    12e0:	430b      	orrs	r3, r1
    12e2:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    12e4:	4b04      	ldr	r3, [pc, #16]	; (12f8 <configure_adc+0x68>)
    12e6:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12e8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12ea:	b25b      	sxtb	r3, r3
    12ec:	2b00      	cmp	r3, #0
    12ee:	dbfb      	blt.n	12e8 <configure_adc+0x58>
	adc_enable(&adc_instance);
	
}
    12f0:	b00c      	add	sp, #48	; 0x30
    12f2:	bd10      	pop	{r4, pc}
    12f4:	00000115 	.word	0x00000115
    12f8:	20000144 	.word	0x20000144
    12fc:	42004000 	.word	0x42004000
    1300:	0000015d 	.word	0x0000015d
    1304:	e000e100 	.word	0xe000e100

00001308 <configure_adc_callbacks>:

void configure_adc_callbacks(void)
{
    1308:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    130a:	4c05      	ldr	r4, [pc, #20]	; (1320 <configure_adc_callbacks+0x18>)
    130c:	2200      	movs	r2, #0
    130e:	4905      	ldr	r1, [pc, #20]	; (1324 <configure_adc_callbacks+0x1c>)
    1310:	0020      	movs	r0, r4
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <configure_adc_callbacks+0x20>)
    1314:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    1316:	7ee3      	ldrb	r3, [r4, #27]
    1318:	2201      	movs	r2, #1
    131a:	4313      	orrs	r3, r2
    131c:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    131e:	bd10      	pop	{r4, pc}
    1320:	20000144 	.word	0x20000144
    1324:	00001201 	.word	0x00001201
    1328:	00000649 	.word	0x00000649

0000132c <main>:
{
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	b086      	sub	sp, #24
	system_init();
    1330:	4b2a      	ldr	r3, [pc, #168]	; (13dc <main+0xb0>)
    1332:	4798      	blx	r3
	delay_init();
    1334:	4b2a      	ldr	r3, [pc, #168]	; (13e0 <main+0xb4>)
    1336:	4798      	blx	r3
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3; 
    1338:	4c2a      	ldr	r4, [pc, #168]	; (13e4 <main+0xb8>)
    133a:	6a23      	ldr	r3, [r4, #32]
    133c:	2220      	movs	r2, #32
    133e:	4313      	orrs	r3, r2
    1340:	6223      	str	r3, [r4, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    1342:	4a29      	ldr	r2, [pc, #164]	; (13e8 <main+0xbc>)
    1344:	4b29      	ldr	r3, [pc, #164]	; (13ec <main+0xc0>)
    1346:	805a      	strh	r2, [r3, #2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN = 1;
    1348:	4b29      	ldr	r3, [pc, #164]	; (13f0 <main+0xc4>)
    134a:	2256      	movs	r2, #86	; 0x56
    134c:	5c99      	ldrb	r1, [r3, r2]
    134e:	2501      	movs	r5, #1
    1350:	4329      	orrs	r1, r5
    1352:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[11].bit.PMUXE = 0x2; // pa22 is config as sercom3 pad[0]
    1354:	213b      	movs	r1, #59	; 0x3b
    1356:	5c5a      	ldrb	r2, [r3, r1]
    1358:	200f      	movs	r0, #15
    135a:	4382      	bics	r2, r0
    135c:	2002      	movs	r0, #2
    135e:	4302      	orrs	r2, r0
    1360:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[23].bit.PMUXEN = 1;
    1362:	2057      	movs	r0, #87	; 0x57
    1364:	5c1a      	ldrb	r2, [r3, r0]
    1366:	432a      	orrs	r2, r5
    1368:	541a      	strb	r2, [r3, r0]
	PORT->Group[0].PMUX[11].bit.PMUXO = 0x2; // pa23 is config as sercom3 pad[1]
    136a:	5c58      	ldrb	r0, [r3, r1]
    136c:	220f      	movs	r2, #15
    136e:	4002      	ands	r2, r0
    1370:	2020      	movs	r0, #32
    1372:	4302      	orrs	r2, r0
    1374:	545a      	strb	r2, [r3, r1]
	uartInit(115200);
    1376:	20e1      	movs	r0, #225	; 0xe1
    1378:	0240      	lsls	r0, r0, #9
    137a:	4b1e      	ldr	r3, [pc, #120]	; (13f4 <main+0xc8>)
    137c:	4798      	blx	r3
	cpu_irq_enable();
    137e:	4b1e      	ldr	r3, [pc, #120]	; (13f8 <main+0xcc>)
    1380:	2201      	movs	r2, #1
    1382:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1384:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1388:	b662      	cpsie	i
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    138a:	2100      	movs	r1, #0
    138c:	200c      	movs	r0, #12
    138e:	4d1b      	ldr	r5, [pc, #108]	; (13fc <main+0xd0>)
    1390:	47a8      	blx	r5
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_ADC, SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);
    1392:	2101      	movs	r1, #1
    1394:	2017      	movs	r0, #23
    1396:	47a8      	blx	r5
	configure_adc();
    1398:	4b19      	ldr	r3, [pc, #100]	; (1400 <main+0xd4>)
    139a:	4798      	blx	r3
	configure_adc_callbacks();
    139c:	4b19      	ldr	r3, [pc, #100]	; (1404 <main+0xd8>)
    139e:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    13a0:	2000      	movs	r0, #0
    13a2:	4b19      	ldr	r3, [pc, #100]	; (1408 <main+0xdc>)
    13a4:	4798      	blx	r3
    13a6:	7a23      	ldrb	r3, [r4, #8]
    13a8:	b2db      	uxtb	r3, r3
    13aa:	40d8      	lsrs	r0, r3
	volatile uint32_t deneme = system_cpu_clock_get_hz();
    13ac:	9005      	str	r0, [sp, #20]
	uint8_t string[] = "Hello World!\r\n";
    13ae:	a801      	add	r0, sp, #4
    13b0:	4b16      	ldr	r3, [pc, #88]	; (140c <main+0xe0>)
    13b2:	0002      	movs	r2, r0
    13b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    13b6:	c232      	stmia	r2!, {r1, r4, r5}
    13b8:	8819      	ldrh	r1, [r3, #0]
    13ba:	8011      	strh	r1, [r2, #0]
    13bc:	789b      	ldrb	r3, [r3, #2]
    13be:	7093      	strb	r3, [r2, #2]
	uartWrite(string, sizeof(string));
    13c0:	210f      	movs	r1, #15
    13c2:	4b13      	ldr	r3, [pc, #76]	; (1410 <main+0xe4>)
    13c4:	4798      	blx	r3
	delay_ms(50);
    13c6:	2032      	movs	r0, #50	; 0x32
    13c8:	4b12      	ldr	r3, [pc, #72]	; (1414 <main+0xe8>)
    13ca:	4798      	blx	r3
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    13cc:	4e12      	ldr	r6, [pc, #72]	; (1418 <main+0xec>)
    13ce:	4d13      	ldr	r5, [pc, #76]	; (141c <main+0xf0>)
    13d0:	4c13      	ldr	r4, [pc, #76]	; (1420 <main+0xf4>)
    13d2:	220a      	movs	r2, #10
    13d4:	0031      	movs	r1, r6
    13d6:	0028      	movs	r0, r5
    13d8:	47a0      	blx	r4
    13da:	e7fa      	b.n	13d2 <main+0xa6>
    13dc:	000010c9 	.word	0x000010c9
    13e0:	000007a1 	.word	0x000007a1
    13e4:	40000400 	.word	0x40000400
    13e8:	00004017 	.word	0x00004017
    13ec:	40000c00 	.word	0x40000c00
    13f0:	41004400 	.word	0x41004400
    13f4:	000006a9 	.word	0x000006a9
    13f8:	2000000c 	.word	0x2000000c
    13fc:	00000f95 	.word	0x00000f95
    1400:	00001291 	.word	0x00001291
    1404:	00001309 	.word	0x00001309
    1408:	00000e2d 	.word	0x00000e2d
    140c:	0000215c 	.word	0x0000215c
    1410:	00000765 	.word	0x00000765
    1414:	000007e1 	.word	0x000007e1
    1418:	20000130 	.word	0x20000130
    141c:	20000144 	.word	0x20000144
    1420:	0000065d 	.word	0x0000065d

00001424 <__udivsi3>:
    1424:	2200      	movs	r2, #0
    1426:	0843      	lsrs	r3, r0, #1
    1428:	428b      	cmp	r3, r1
    142a:	d374      	bcc.n	1516 <__udivsi3+0xf2>
    142c:	0903      	lsrs	r3, r0, #4
    142e:	428b      	cmp	r3, r1
    1430:	d35f      	bcc.n	14f2 <__udivsi3+0xce>
    1432:	0a03      	lsrs	r3, r0, #8
    1434:	428b      	cmp	r3, r1
    1436:	d344      	bcc.n	14c2 <__udivsi3+0x9e>
    1438:	0b03      	lsrs	r3, r0, #12
    143a:	428b      	cmp	r3, r1
    143c:	d328      	bcc.n	1490 <__udivsi3+0x6c>
    143e:	0c03      	lsrs	r3, r0, #16
    1440:	428b      	cmp	r3, r1
    1442:	d30d      	bcc.n	1460 <__udivsi3+0x3c>
    1444:	22ff      	movs	r2, #255	; 0xff
    1446:	0209      	lsls	r1, r1, #8
    1448:	ba12      	rev	r2, r2
    144a:	0c03      	lsrs	r3, r0, #16
    144c:	428b      	cmp	r3, r1
    144e:	d302      	bcc.n	1456 <__udivsi3+0x32>
    1450:	1212      	asrs	r2, r2, #8
    1452:	0209      	lsls	r1, r1, #8
    1454:	d065      	beq.n	1522 <__udivsi3+0xfe>
    1456:	0b03      	lsrs	r3, r0, #12
    1458:	428b      	cmp	r3, r1
    145a:	d319      	bcc.n	1490 <__udivsi3+0x6c>
    145c:	e000      	b.n	1460 <__udivsi3+0x3c>
    145e:	0a09      	lsrs	r1, r1, #8
    1460:	0bc3      	lsrs	r3, r0, #15
    1462:	428b      	cmp	r3, r1
    1464:	d301      	bcc.n	146a <__udivsi3+0x46>
    1466:	03cb      	lsls	r3, r1, #15
    1468:	1ac0      	subs	r0, r0, r3
    146a:	4152      	adcs	r2, r2
    146c:	0b83      	lsrs	r3, r0, #14
    146e:	428b      	cmp	r3, r1
    1470:	d301      	bcc.n	1476 <__udivsi3+0x52>
    1472:	038b      	lsls	r3, r1, #14
    1474:	1ac0      	subs	r0, r0, r3
    1476:	4152      	adcs	r2, r2
    1478:	0b43      	lsrs	r3, r0, #13
    147a:	428b      	cmp	r3, r1
    147c:	d301      	bcc.n	1482 <__udivsi3+0x5e>
    147e:	034b      	lsls	r3, r1, #13
    1480:	1ac0      	subs	r0, r0, r3
    1482:	4152      	adcs	r2, r2
    1484:	0b03      	lsrs	r3, r0, #12
    1486:	428b      	cmp	r3, r1
    1488:	d301      	bcc.n	148e <__udivsi3+0x6a>
    148a:	030b      	lsls	r3, r1, #12
    148c:	1ac0      	subs	r0, r0, r3
    148e:	4152      	adcs	r2, r2
    1490:	0ac3      	lsrs	r3, r0, #11
    1492:	428b      	cmp	r3, r1
    1494:	d301      	bcc.n	149a <__udivsi3+0x76>
    1496:	02cb      	lsls	r3, r1, #11
    1498:	1ac0      	subs	r0, r0, r3
    149a:	4152      	adcs	r2, r2
    149c:	0a83      	lsrs	r3, r0, #10
    149e:	428b      	cmp	r3, r1
    14a0:	d301      	bcc.n	14a6 <__udivsi3+0x82>
    14a2:	028b      	lsls	r3, r1, #10
    14a4:	1ac0      	subs	r0, r0, r3
    14a6:	4152      	adcs	r2, r2
    14a8:	0a43      	lsrs	r3, r0, #9
    14aa:	428b      	cmp	r3, r1
    14ac:	d301      	bcc.n	14b2 <__udivsi3+0x8e>
    14ae:	024b      	lsls	r3, r1, #9
    14b0:	1ac0      	subs	r0, r0, r3
    14b2:	4152      	adcs	r2, r2
    14b4:	0a03      	lsrs	r3, r0, #8
    14b6:	428b      	cmp	r3, r1
    14b8:	d301      	bcc.n	14be <__udivsi3+0x9a>
    14ba:	020b      	lsls	r3, r1, #8
    14bc:	1ac0      	subs	r0, r0, r3
    14be:	4152      	adcs	r2, r2
    14c0:	d2cd      	bcs.n	145e <__udivsi3+0x3a>
    14c2:	09c3      	lsrs	r3, r0, #7
    14c4:	428b      	cmp	r3, r1
    14c6:	d301      	bcc.n	14cc <__udivsi3+0xa8>
    14c8:	01cb      	lsls	r3, r1, #7
    14ca:	1ac0      	subs	r0, r0, r3
    14cc:	4152      	adcs	r2, r2
    14ce:	0983      	lsrs	r3, r0, #6
    14d0:	428b      	cmp	r3, r1
    14d2:	d301      	bcc.n	14d8 <__udivsi3+0xb4>
    14d4:	018b      	lsls	r3, r1, #6
    14d6:	1ac0      	subs	r0, r0, r3
    14d8:	4152      	adcs	r2, r2
    14da:	0943      	lsrs	r3, r0, #5
    14dc:	428b      	cmp	r3, r1
    14de:	d301      	bcc.n	14e4 <__udivsi3+0xc0>
    14e0:	014b      	lsls	r3, r1, #5
    14e2:	1ac0      	subs	r0, r0, r3
    14e4:	4152      	adcs	r2, r2
    14e6:	0903      	lsrs	r3, r0, #4
    14e8:	428b      	cmp	r3, r1
    14ea:	d301      	bcc.n	14f0 <__udivsi3+0xcc>
    14ec:	010b      	lsls	r3, r1, #4
    14ee:	1ac0      	subs	r0, r0, r3
    14f0:	4152      	adcs	r2, r2
    14f2:	08c3      	lsrs	r3, r0, #3
    14f4:	428b      	cmp	r3, r1
    14f6:	d301      	bcc.n	14fc <__udivsi3+0xd8>
    14f8:	00cb      	lsls	r3, r1, #3
    14fa:	1ac0      	subs	r0, r0, r3
    14fc:	4152      	adcs	r2, r2
    14fe:	0883      	lsrs	r3, r0, #2
    1500:	428b      	cmp	r3, r1
    1502:	d301      	bcc.n	1508 <__udivsi3+0xe4>
    1504:	008b      	lsls	r3, r1, #2
    1506:	1ac0      	subs	r0, r0, r3
    1508:	4152      	adcs	r2, r2
    150a:	0843      	lsrs	r3, r0, #1
    150c:	428b      	cmp	r3, r1
    150e:	d301      	bcc.n	1514 <__udivsi3+0xf0>
    1510:	004b      	lsls	r3, r1, #1
    1512:	1ac0      	subs	r0, r0, r3
    1514:	4152      	adcs	r2, r2
    1516:	1a41      	subs	r1, r0, r1
    1518:	d200      	bcs.n	151c <__udivsi3+0xf8>
    151a:	4601      	mov	r1, r0
    151c:	4152      	adcs	r2, r2
    151e:	4610      	mov	r0, r2
    1520:	4770      	bx	lr
    1522:	e7ff      	b.n	1524 <__udivsi3+0x100>
    1524:	b501      	push	{r0, lr}
    1526:	2000      	movs	r0, #0
    1528:	f000 f806 	bl	1538 <__aeabi_idiv0>
    152c:	bd02      	pop	{r1, pc}
    152e:	46c0      	nop			; (mov r8, r8)

00001530 <__aeabi_uidivmod>:
    1530:	2900      	cmp	r1, #0
    1532:	d0f7      	beq.n	1524 <__udivsi3+0x100>
    1534:	e776      	b.n	1424 <__udivsi3>
    1536:	4770      	bx	lr

00001538 <__aeabi_idiv0>:
    1538:	4770      	bx	lr
    153a:	46c0      	nop			; (mov r8, r8)

0000153c <__aeabi_uldivmod>:
    153c:	2b00      	cmp	r3, #0
    153e:	d111      	bne.n	1564 <__aeabi_uldivmod+0x28>
    1540:	2a00      	cmp	r2, #0
    1542:	d10f      	bne.n	1564 <__aeabi_uldivmod+0x28>
    1544:	2900      	cmp	r1, #0
    1546:	d100      	bne.n	154a <__aeabi_uldivmod+0xe>
    1548:	2800      	cmp	r0, #0
    154a:	d002      	beq.n	1552 <__aeabi_uldivmod+0x16>
    154c:	2100      	movs	r1, #0
    154e:	43c9      	mvns	r1, r1
    1550:	1c08      	adds	r0, r1, #0
    1552:	b407      	push	{r0, r1, r2}
    1554:	4802      	ldr	r0, [pc, #8]	; (1560 <__aeabi_uldivmod+0x24>)
    1556:	a102      	add	r1, pc, #8	; (adr r1, 1560 <__aeabi_uldivmod+0x24>)
    1558:	1840      	adds	r0, r0, r1
    155a:	9002      	str	r0, [sp, #8]
    155c:	bd03      	pop	{r0, r1, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	ffffffd9 	.word	0xffffffd9
    1564:	b403      	push	{r0, r1}
    1566:	4668      	mov	r0, sp
    1568:	b501      	push	{r0, lr}
    156a:	9802      	ldr	r0, [sp, #8]
    156c:	f000 f806 	bl	157c <__udivmoddi4>
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	469e      	mov	lr, r3
    1574:	b002      	add	sp, #8
    1576:	bc0c      	pop	{r2, r3}
    1578:	4770      	bx	lr
    157a:	46c0      	nop			; (mov r8, r8)

0000157c <__udivmoddi4>:
    157c:	b5f0      	push	{r4, r5, r6, r7, lr}
    157e:	4657      	mov	r7, sl
    1580:	464e      	mov	r6, r9
    1582:	4645      	mov	r5, r8
    1584:	46de      	mov	lr, fp
    1586:	b5e0      	push	{r5, r6, r7, lr}
    1588:	0004      	movs	r4, r0
    158a:	b083      	sub	sp, #12
    158c:	000d      	movs	r5, r1
    158e:	4692      	mov	sl, r2
    1590:	4699      	mov	r9, r3
    1592:	428b      	cmp	r3, r1
    1594:	d82f      	bhi.n	15f6 <__udivmoddi4+0x7a>
    1596:	d02c      	beq.n	15f2 <__udivmoddi4+0x76>
    1598:	4649      	mov	r1, r9
    159a:	4650      	mov	r0, sl
    159c:	f000 f8ae 	bl	16fc <__clzdi2>
    15a0:	0029      	movs	r1, r5
    15a2:	0006      	movs	r6, r0
    15a4:	0020      	movs	r0, r4
    15a6:	f000 f8a9 	bl	16fc <__clzdi2>
    15aa:	1a33      	subs	r3, r6, r0
    15ac:	4698      	mov	r8, r3
    15ae:	3b20      	subs	r3, #32
    15b0:	469b      	mov	fp, r3
    15b2:	d500      	bpl.n	15b6 <__udivmoddi4+0x3a>
    15b4:	e074      	b.n	16a0 <__udivmoddi4+0x124>
    15b6:	4653      	mov	r3, sl
    15b8:	465a      	mov	r2, fp
    15ba:	4093      	lsls	r3, r2
    15bc:	001f      	movs	r7, r3
    15be:	4653      	mov	r3, sl
    15c0:	4642      	mov	r2, r8
    15c2:	4093      	lsls	r3, r2
    15c4:	001e      	movs	r6, r3
    15c6:	42af      	cmp	r7, r5
    15c8:	d829      	bhi.n	161e <__udivmoddi4+0xa2>
    15ca:	d026      	beq.n	161a <__udivmoddi4+0x9e>
    15cc:	465b      	mov	r3, fp
    15ce:	1ba4      	subs	r4, r4, r6
    15d0:	41bd      	sbcs	r5, r7
    15d2:	2b00      	cmp	r3, #0
    15d4:	da00      	bge.n	15d8 <__udivmoddi4+0x5c>
    15d6:	e079      	b.n	16cc <__udivmoddi4+0x150>
    15d8:	2200      	movs	r2, #0
    15da:	2300      	movs	r3, #0
    15dc:	9200      	str	r2, [sp, #0]
    15de:	9301      	str	r3, [sp, #4]
    15e0:	2301      	movs	r3, #1
    15e2:	465a      	mov	r2, fp
    15e4:	4093      	lsls	r3, r2
    15e6:	9301      	str	r3, [sp, #4]
    15e8:	2301      	movs	r3, #1
    15ea:	4642      	mov	r2, r8
    15ec:	4093      	lsls	r3, r2
    15ee:	9300      	str	r3, [sp, #0]
    15f0:	e019      	b.n	1626 <__udivmoddi4+0xaa>
    15f2:	4282      	cmp	r2, r0
    15f4:	d9d0      	bls.n	1598 <__udivmoddi4+0x1c>
    15f6:	2200      	movs	r2, #0
    15f8:	2300      	movs	r3, #0
    15fa:	9200      	str	r2, [sp, #0]
    15fc:	9301      	str	r3, [sp, #4]
    15fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1600:	2b00      	cmp	r3, #0
    1602:	d001      	beq.n	1608 <__udivmoddi4+0x8c>
    1604:	601c      	str	r4, [r3, #0]
    1606:	605d      	str	r5, [r3, #4]
    1608:	9800      	ldr	r0, [sp, #0]
    160a:	9901      	ldr	r1, [sp, #4]
    160c:	b003      	add	sp, #12
    160e:	bc3c      	pop	{r2, r3, r4, r5}
    1610:	4690      	mov	r8, r2
    1612:	4699      	mov	r9, r3
    1614:	46a2      	mov	sl, r4
    1616:	46ab      	mov	fp, r5
    1618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    161a:	42a3      	cmp	r3, r4
    161c:	d9d6      	bls.n	15cc <__udivmoddi4+0x50>
    161e:	2200      	movs	r2, #0
    1620:	2300      	movs	r3, #0
    1622:	9200      	str	r2, [sp, #0]
    1624:	9301      	str	r3, [sp, #4]
    1626:	4643      	mov	r3, r8
    1628:	2b00      	cmp	r3, #0
    162a:	d0e8      	beq.n	15fe <__udivmoddi4+0x82>
    162c:	07fb      	lsls	r3, r7, #31
    162e:	0872      	lsrs	r2, r6, #1
    1630:	431a      	orrs	r2, r3
    1632:	4646      	mov	r6, r8
    1634:	087b      	lsrs	r3, r7, #1
    1636:	e00e      	b.n	1656 <__udivmoddi4+0xda>
    1638:	42ab      	cmp	r3, r5
    163a:	d101      	bne.n	1640 <__udivmoddi4+0xc4>
    163c:	42a2      	cmp	r2, r4
    163e:	d80c      	bhi.n	165a <__udivmoddi4+0xde>
    1640:	1aa4      	subs	r4, r4, r2
    1642:	419d      	sbcs	r5, r3
    1644:	2001      	movs	r0, #1
    1646:	1924      	adds	r4, r4, r4
    1648:	416d      	adcs	r5, r5
    164a:	2100      	movs	r1, #0
    164c:	3e01      	subs	r6, #1
    164e:	1824      	adds	r4, r4, r0
    1650:	414d      	adcs	r5, r1
    1652:	2e00      	cmp	r6, #0
    1654:	d006      	beq.n	1664 <__udivmoddi4+0xe8>
    1656:	42ab      	cmp	r3, r5
    1658:	d9ee      	bls.n	1638 <__udivmoddi4+0xbc>
    165a:	3e01      	subs	r6, #1
    165c:	1924      	adds	r4, r4, r4
    165e:	416d      	adcs	r5, r5
    1660:	2e00      	cmp	r6, #0
    1662:	d1f8      	bne.n	1656 <__udivmoddi4+0xda>
    1664:	465b      	mov	r3, fp
    1666:	9800      	ldr	r0, [sp, #0]
    1668:	9901      	ldr	r1, [sp, #4]
    166a:	1900      	adds	r0, r0, r4
    166c:	4169      	adcs	r1, r5
    166e:	2b00      	cmp	r3, #0
    1670:	db22      	blt.n	16b8 <__udivmoddi4+0x13c>
    1672:	002b      	movs	r3, r5
    1674:	465a      	mov	r2, fp
    1676:	40d3      	lsrs	r3, r2
    1678:	002a      	movs	r2, r5
    167a:	4644      	mov	r4, r8
    167c:	40e2      	lsrs	r2, r4
    167e:	001c      	movs	r4, r3
    1680:	465b      	mov	r3, fp
    1682:	0015      	movs	r5, r2
    1684:	2b00      	cmp	r3, #0
    1686:	db2c      	blt.n	16e2 <__udivmoddi4+0x166>
    1688:	0026      	movs	r6, r4
    168a:	409e      	lsls	r6, r3
    168c:	0033      	movs	r3, r6
    168e:	0026      	movs	r6, r4
    1690:	4647      	mov	r7, r8
    1692:	40be      	lsls	r6, r7
    1694:	0032      	movs	r2, r6
    1696:	1a80      	subs	r0, r0, r2
    1698:	4199      	sbcs	r1, r3
    169a:	9000      	str	r0, [sp, #0]
    169c:	9101      	str	r1, [sp, #4]
    169e:	e7ae      	b.n	15fe <__udivmoddi4+0x82>
    16a0:	4642      	mov	r2, r8
    16a2:	2320      	movs	r3, #32
    16a4:	1a9b      	subs	r3, r3, r2
    16a6:	4652      	mov	r2, sl
    16a8:	40da      	lsrs	r2, r3
    16aa:	4641      	mov	r1, r8
    16ac:	0013      	movs	r3, r2
    16ae:	464a      	mov	r2, r9
    16b0:	408a      	lsls	r2, r1
    16b2:	0017      	movs	r7, r2
    16b4:	431f      	orrs	r7, r3
    16b6:	e782      	b.n	15be <__udivmoddi4+0x42>
    16b8:	4642      	mov	r2, r8
    16ba:	2320      	movs	r3, #32
    16bc:	1a9b      	subs	r3, r3, r2
    16be:	002a      	movs	r2, r5
    16c0:	4646      	mov	r6, r8
    16c2:	409a      	lsls	r2, r3
    16c4:	0023      	movs	r3, r4
    16c6:	40f3      	lsrs	r3, r6
    16c8:	4313      	orrs	r3, r2
    16ca:	e7d5      	b.n	1678 <__udivmoddi4+0xfc>
    16cc:	4642      	mov	r2, r8
    16ce:	2320      	movs	r3, #32
    16d0:	2100      	movs	r1, #0
    16d2:	1a9b      	subs	r3, r3, r2
    16d4:	2200      	movs	r2, #0
    16d6:	9100      	str	r1, [sp, #0]
    16d8:	9201      	str	r2, [sp, #4]
    16da:	2201      	movs	r2, #1
    16dc:	40da      	lsrs	r2, r3
    16de:	9201      	str	r2, [sp, #4]
    16e0:	e782      	b.n	15e8 <__udivmoddi4+0x6c>
    16e2:	4642      	mov	r2, r8
    16e4:	2320      	movs	r3, #32
    16e6:	0026      	movs	r6, r4
    16e8:	1a9b      	subs	r3, r3, r2
    16ea:	40de      	lsrs	r6, r3
    16ec:	002f      	movs	r7, r5
    16ee:	46b4      	mov	ip, r6
    16f0:	4097      	lsls	r7, r2
    16f2:	4666      	mov	r6, ip
    16f4:	003b      	movs	r3, r7
    16f6:	4333      	orrs	r3, r6
    16f8:	e7c9      	b.n	168e <__udivmoddi4+0x112>
    16fa:	46c0      	nop			; (mov r8, r8)

000016fc <__clzdi2>:
    16fc:	b510      	push	{r4, lr}
    16fe:	2900      	cmp	r1, #0
    1700:	d103      	bne.n	170a <__clzdi2+0xe>
    1702:	f000 f807 	bl	1714 <__clzsi2>
    1706:	3020      	adds	r0, #32
    1708:	e002      	b.n	1710 <__clzdi2+0x14>
    170a:	1c08      	adds	r0, r1, #0
    170c:	f000 f802 	bl	1714 <__clzsi2>
    1710:	bd10      	pop	{r4, pc}
    1712:	46c0      	nop			; (mov r8, r8)

00001714 <__clzsi2>:
    1714:	211c      	movs	r1, #28
    1716:	2301      	movs	r3, #1
    1718:	041b      	lsls	r3, r3, #16
    171a:	4298      	cmp	r0, r3
    171c:	d301      	bcc.n	1722 <__clzsi2+0xe>
    171e:	0c00      	lsrs	r0, r0, #16
    1720:	3910      	subs	r1, #16
    1722:	0a1b      	lsrs	r3, r3, #8
    1724:	4298      	cmp	r0, r3
    1726:	d301      	bcc.n	172c <__clzsi2+0x18>
    1728:	0a00      	lsrs	r0, r0, #8
    172a:	3908      	subs	r1, #8
    172c:	091b      	lsrs	r3, r3, #4
    172e:	4298      	cmp	r0, r3
    1730:	d301      	bcc.n	1736 <__clzsi2+0x22>
    1732:	0900      	lsrs	r0, r0, #4
    1734:	3904      	subs	r1, #4
    1736:	a202      	add	r2, pc, #8	; (adr r2, 1740 <__clzsi2+0x2c>)
    1738:	5c10      	ldrb	r0, [r2, r0]
    173a:	1840      	adds	r0, r0, r1
    173c:	4770      	bx	lr
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	02020304 	.word	0x02020304
    1744:	01010101 	.word	0x01010101
	...

00001750 <__libc_init_array>:
    1750:	b570      	push	{r4, r5, r6, lr}
    1752:	2600      	movs	r6, #0
    1754:	4d0c      	ldr	r5, [pc, #48]	; (1788 <__libc_init_array+0x38>)
    1756:	4c0d      	ldr	r4, [pc, #52]	; (178c <__libc_init_array+0x3c>)
    1758:	1b64      	subs	r4, r4, r5
    175a:	10a4      	asrs	r4, r4, #2
    175c:	42a6      	cmp	r6, r4
    175e:	d109      	bne.n	1774 <__libc_init_array+0x24>
    1760:	2600      	movs	r6, #0
    1762:	f000 fd1d 	bl	21a0 <_init>
    1766:	4d0a      	ldr	r5, [pc, #40]	; (1790 <__libc_init_array+0x40>)
    1768:	4c0a      	ldr	r4, [pc, #40]	; (1794 <__libc_init_array+0x44>)
    176a:	1b64      	subs	r4, r4, r5
    176c:	10a4      	asrs	r4, r4, #2
    176e:	42a6      	cmp	r6, r4
    1770:	d105      	bne.n	177e <__libc_init_array+0x2e>
    1772:	bd70      	pop	{r4, r5, r6, pc}
    1774:	00b3      	lsls	r3, r6, #2
    1776:	58eb      	ldr	r3, [r5, r3]
    1778:	4798      	blx	r3
    177a:	3601      	adds	r6, #1
    177c:	e7ee      	b.n	175c <__libc_init_array+0xc>
    177e:	00b3      	lsls	r3, r6, #2
    1780:	58eb      	ldr	r3, [r5, r3]
    1782:	4798      	blx	r3
    1784:	3601      	adds	r6, #1
    1786:	e7f2      	b.n	176e <__libc_init_array+0x1e>
    1788:	000021ac 	.word	0x000021ac
    178c:	000021ac 	.word	0x000021ac
    1790:	000021ac 	.word	0x000021ac
    1794:	000021b0 	.word	0x000021b0

00001798 <memcpy>:
    1798:	2300      	movs	r3, #0
    179a:	b510      	push	{r4, lr}
    179c:	429a      	cmp	r2, r3
    179e:	d100      	bne.n	17a2 <memcpy+0xa>
    17a0:	bd10      	pop	{r4, pc}
    17a2:	5ccc      	ldrb	r4, [r1, r3]
    17a4:	54c4      	strb	r4, [r0, r3]
    17a6:	3301      	adds	r3, #1
    17a8:	e7f8      	b.n	179c <memcpy+0x4>

000017aa <memset>:
    17aa:	0003      	movs	r3, r0
    17ac:	1882      	adds	r2, r0, r2
    17ae:	4293      	cmp	r3, r2
    17b0:	d100      	bne.n	17b4 <memset+0xa>
    17b2:	4770      	bx	lr
    17b4:	7019      	strb	r1, [r3, #0]
    17b6:	3301      	adds	r3, #1
    17b8:	e7f9      	b.n	17ae <memset+0x4>
	...

000017bc <siprintf>:
    17bc:	b40e      	push	{r1, r2, r3}
    17be:	b510      	push	{r4, lr}
    17c0:	b09d      	sub	sp, #116	; 0x74
    17c2:	a902      	add	r1, sp, #8
    17c4:	9002      	str	r0, [sp, #8]
    17c6:	6108      	str	r0, [r1, #16]
    17c8:	480b      	ldr	r0, [pc, #44]	; (17f8 <siprintf+0x3c>)
    17ca:	2482      	movs	r4, #130	; 0x82
    17cc:	6088      	str	r0, [r1, #8]
    17ce:	6148      	str	r0, [r1, #20]
    17d0:	2001      	movs	r0, #1
    17d2:	4240      	negs	r0, r0
    17d4:	ab1f      	add	r3, sp, #124	; 0x7c
    17d6:	81c8      	strh	r0, [r1, #14]
    17d8:	4808      	ldr	r0, [pc, #32]	; (17fc <siprintf+0x40>)
    17da:	cb04      	ldmia	r3!, {r2}
    17dc:	00a4      	lsls	r4, r4, #2
    17de:	6800      	ldr	r0, [r0, #0]
    17e0:	9301      	str	r3, [sp, #4]
    17e2:	818c      	strh	r4, [r1, #12]
    17e4:	f000 f86e 	bl	18c4 <_svfiprintf_r>
    17e8:	2300      	movs	r3, #0
    17ea:	9a02      	ldr	r2, [sp, #8]
    17ec:	7013      	strb	r3, [r2, #0]
    17ee:	b01d      	add	sp, #116	; 0x74
    17f0:	bc10      	pop	{r4}
    17f2:	bc08      	pop	{r3}
    17f4:	b003      	add	sp, #12
    17f6:	4718      	bx	r3
    17f8:	7fffffff 	.word	0x7fffffff
    17fc:	20000018 	.word	0x20000018

00001800 <__ssputs_r>:
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	688e      	ldr	r6, [r1, #8]
    1804:	b085      	sub	sp, #20
    1806:	0007      	movs	r7, r0
    1808:	000c      	movs	r4, r1
    180a:	9203      	str	r2, [sp, #12]
    180c:	9301      	str	r3, [sp, #4]
    180e:	429e      	cmp	r6, r3
    1810:	d839      	bhi.n	1886 <__ssputs_r+0x86>
    1812:	2390      	movs	r3, #144	; 0x90
    1814:	898a      	ldrh	r2, [r1, #12]
    1816:	00db      	lsls	r3, r3, #3
    1818:	421a      	tst	r2, r3
    181a:	d034      	beq.n	1886 <__ssputs_r+0x86>
    181c:	2503      	movs	r5, #3
    181e:	6909      	ldr	r1, [r1, #16]
    1820:	6823      	ldr	r3, [r4, #0]
    1822:	1a5b      	subs	r3, r3, r1
    1824:	9302      	str	r3, [sp, #8]
    1826:	6963      	ldr	r3, [r4, #20]
    1828:	9802      	ldr	r0, [sp, #8]
    182a:	435d      	muls	r5, r3
    182c:	0feb      	lsrs	r3, r5, #31
    182e:	195d      	adds	r5, r3, r5
    1830:	9b01      	ldr	r3, [sp, #4]
    1832:	106d      	asrs	r5, r5, #1
    1834:	3301      	adds	r3, #1
    1836:	181b      	adds	r3, r3, r0
    1838:	42ab      	cmp	r3, r5
    183a:	d900      	bls.n	183e <__ssputs_r+0x3e>
    183c:	001d      	movs	r5, r3
    183e:	0553      	lsls	r3, r2, #21
    1840:	d532      	bpl.n	18a8 <__ssputs_r+0xa8>
    1842:	0029      	movs	r1, r5
    1844:	0038      	movs	r0, r7
    1846:	f000 fb31 	bl	1eac <_malloc_r>
    184a:	1e06      	subs	r6, r0, #0
    184c:	d109      	bne.n	1862 <__ssputs_r+0x62>
    184e:	230c      	movs	r3, #12
    1850:	603b      	str	r3, [r7, #0]
    1852:	2340      	movs	r3, #64	; 0x40
    1854:	2001      	movs	r0, #1
    1856:	89a2      	ldrh	r2, [r4, #12]
    1858:	4240      	negs	r0, r0
    185a:	4313      	orrs	r3, r2
    185c:	81a3      	strh	r3, [r4, #12]
    185e:	b005      	add	sp, #20
    1860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1862:	9a02      	ldr	r2, [sp, #8]
    1864:	6921      	ldr	r1, [r4, #16]
    1866:	f7ff ff97 	bl	1798 <memcpy>
    186a:	89a3      	ldrh	r3, [r4, #12]
    186c:	4a14      	ldr	r2, [pc, #80]	; (18c0 <__ssputs_r+0xc0>)
    186e:	401a      	ands	r2, r3
    1870:	2380      	movs	r3, #128	; 0x80
    1872:	4313      	orrs	r3, r2
    1874:	81a3      	strh	r3, [r4, #12]
    1876:	9b02      	ldr	r3, [sp, #8]
    1878:	6126      	str	r6, [r4, #16]
    187a:	18f6      	adds	r6, r6, r3
    187c:	6026      	str	r6, [r4, #0]
    187e:	6165      	str	r5, [r4, #20]
    1880:	9e01      	ldr	r6, [sp, #4]
    1882:	1aed      	subs	r5, r5, r3
    1884:	60a5      	str	r5, [r4, #8]
    1886:	9b01      	ldr	r3, [sp, #4]
    1888:	42b3      	cmp	r3, r6
    188a:	d200      	bcs.n	188e <__ssputs_r+0x8e>
    188c:	001e      	movs	r6, r3
    188e:	0032      	movs	r2, r6
    1890:	9903      	ldr	r1, [sp, #12]
    1892:	6820      	ldr	r0, [r4, #0]
    1894:	f000 faad 	bl	1df2 <memmove>
    1898:	68a3      	ldr	r3, [r4, #8]
    189a:	2000      	movs	r0, #0
    189c:	1b9b      	subs	r3, r3, r6
    189e:	60a3      	str	r3, [r4, #8]
    18a0:	6823      	ldr	r3, [r4, #0]
    18a2:	199e      	adds	r6, r3, r6
    18a4:	6026      	str	r6, [r4, #0]
    18a6:	e7da      	b.n	185e <__ssputs_r+0x5e>
    18a8:	002a      	movs	r2, r5
    18aa:	0038      	movs	r0, r7
    18ac:	f000 fb5c 	bl	1f68 <_realloc_r>
    18b0:	1e06      	subs	r6, r0, #0
    18b2:	d1e0      	bne.n	1876 <__ssputs_r+0x76>
    18b4:	6921      	ldr	r1, [r4, #16]
    18b6:	0038      	movs	r0, r7
    18b8:	f000 faae 	bl	1e18 <_free_r>
    18bc:	e7c7      	b.n	184e <__ssputs_r+0x4e>
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	fffffb7f 	.word	0xfffffb7f

000018c4 <_svfiprintf_r>:
    18c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c6:	b09f      	sub	sp, #124	; 0x7c
    18c8:	9002      	str	r0, [sp, #8]
    18ca:	9305      	str	r3, [sp, #20]
    18cc:	898b      	ldrh	r3, [r1, #12]
    18ce:	000f      	movs	r7, r1
    18d0:	0016      	movs	r6, r2
    18d2:	061b      	lsls	r3, r3, #24
    18d4:	d511      	bpl.n	18fa <_svfiprintf_r+0x36>
    18d6:	690b      	ldr	r3, [r1, #16]
    18d8:	2b00      	cmp	r3, #0
    18da:	d10e      	bne.n	18fa <_svfiprintf_r+0x36>
    18dc:	2140      	movs	r1, #64	; 0x40
    18de:	f000 fae5 	bl	1eac <_malloc_r>
    18e2:	6038      	str	r0, [r7, #0]
    18e4:	6138      	str	r0, [r7, #16]
    18e6:	2800      	cmp	r0, #0
    18e8:	d105      	bne.n	18f6 <_svfiprintf_r+0x32>
    18ea:	230c      	movs	r3, #12
    18ec:	9a02      	ldr	r2, [sp, #8]
    18ee:	3801      	subs	r0, #1
    18f0:	6013      	str	r3, [r2, #0]
    18f2:	b01f      	add	sp, #124	; 0x7c
    18f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18f6:	2340      	movs	r3, #64	; 0x40
    18f8:	617b      	str	r3, [r7, #20]
    18fa:	2300      	movs	r3, #0
    18fc:	ad06      	add	r5, sp, #24
    18fe:	616b      	str	r3, [r5, #20]
    1900:	3320      	adds	r3, #32
    1902:	766b      	strb	r3, [r5, #25]
    1904:	3310      	adds	r3, #16
    1906:	76ab      	strb	r3, [r5, #26]
    1908:	0034      	movs	r4, r6
    190a:	7823      	ldrb	r3, [r4, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d147      	bne.n	19a0 <_svfiprintf_r+0xdc>
    1910:	1ba3      	subs	r3, r4, r6
    1912:	9304      	str	r3, [sp, #16]
    1914:	d00d      	beq.n	1932 <_svfiprintf_r+0x6e>
    1916:	1ba3      	subs	r3, r4, r6
    1918:	0032      	movs	r2, r6
    191a:	0039      	movs	r1, r7
    191c:	9802      	ldr	r0, [sp, #8]
    191e:	f7ff ff6f 	bl	1800 <__ssputs_r>
    1922:	1c43      	adds	r3, r0, #1
    1924:	d100      	bne.n	1928 <_svfiprintf_r+0x64>
    1926:	e0b5      	b.n	1a94 <_svfiprintf_r+0x1d0>
    1928:	696a      	ldr	r2, [r5, #20]
    192a:	9b04      	ldr	r3, [sp, #16]
    192c:	4694      	mov	ip, r2
    192e:	4463      	add	r3, ip
    1930:	616b      	str	r3, [r5, #20]
    1932:	7823      	ldrb	r3, [r4, #0]
    1934:	2b00      	cmp	r3, #0
    1936:	d100      	bne.n	193a <_svfiprintf_r+0x76>
    1938:	e0ac      	b.n	1a94 <_svfiprintf_r+0x1d0>
    193a:	2201      	movs	r2, #1
    193c:	2300      	movs	r3, #0
    193e:	4252      	negs	r2, r2
    1940:	606a      	str	r2, [r5, #4]
    1942:	a902      	add	r1, sp, #8
    1944:	3254      	adds	r2, #84	; 0x54
    1946:	1852      	adds	r2, r2, r1
    1948:	3401      	adds	r4, #1
    194a:	602b      	str	r3, [r5, #0]
    194c:	60eb      	str	r3, [r5, #12]
    194e:	60ab      	str	r3, [r5, #8]
    1950:	7013      	strb	r3, [r2, #0]
    1952:	65ab      	str	r3, [r5, #88]	; 0x58
    1954:	4e58      	ldr	r6, [pc, #352]	; (1ab8 <_svfiprintf_r+0x1f4>)
    1956:	2205      	movs	r2, #5
    1958:	7821      	ldrb	r1, [r4, #0]
    195a:	0030      	movs	r0, r6
    195c:	f000 fa3e 	bl	1ddc <memchr>
    1960:	1c62      	adds	r2, r4, #1
    1962:	2800      	cmp	r0, #0
    1964:	d120      	bne.n	19a8 <_svfiprintf_r+0xe4>
    1966:	6829      	ldr	r1, [r5, #0]
    1968:	06cb      	lsls	r3, r1, #27
    196a:	d504      	bpl.n	1976 <_svfiprintf_r+0xb2>
    196c:	2353      	movs	r3, #83	; 0x53
    196e:	ae02      	add	r6, sp, #8
    1970:	3020      	adds	r0, #32
    1972:	199b      	adds	r3, r3, r6
    1974:	7018      	strb	r0, [r3, #0]
    1976:	070b      	lsls	r3, r1, #28
    1978:	d504      	bpl.n	1984 <_svfiprintf_r+0xc0>
    197a:	2353      	movs	r3, #83	; 0x53
    197c:	202b      	movs	r0, #43	; 0x2b
    197e:	ae02      	add	r6, sp, #8
    1980:	199b      	adds	r3, r3, r6
    1982:	7018      	strb	r0, [r3, #0]
    1984:	7823      	ldrb	r3, [r4, #0]
    1986:	2b2a      	cmp	r3, #42	; 0x2a
    1988:	d016      	beq.n	19b8 <_svfiprintf_r+0xf4>
    198a:	2000      	movs	r0, #0
    198c:	210a      	movs	r1, #10
    198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1990:	7822      	ldrb	r2, [r4, #0]
    1992:	3a30      	subs	r2, #48	; 0x30
    1994:	2a09      	cmp	r2, #9
    1996:	d955      	bls.n	1a44 <_svfiprintf_r+0x180>
    1998:	2800      	cmp	r0, #0
    199a:	d015      	beq.n	19c8 <_svfiprintf_r+0x104>
    199c:	9309      	str	r3, [sp, #36]	; 0x24
    199e:	e013      	b.n	19c8 <_svfiprintf_r+0x104>
    19a0:	2b25      	cmp	r3, #37	; 0x25
    19a2:	d0b5      	beq.n	1910 <_svfiprintf_r+0x4c>
    19a4:	3401      	adds	r4, #1
    19a6:	e7b0      	b.n	190a <_svfiprintf_r+0x46>
    19a8:	2301      	movs	r3, #1
    19aa:	1b80      	subs	r0, r0, r6
    19ac:	4083      	lsls	r3, r0
    19ae:	6829      	ldr	r1, [r5, #0]
    19b0:	0014      	movs	r4, r2
    19b2:	430b      	orrs	r3, r1
    19b4:	602b      	str	r3, [r5, #0]
    19b6:	e7cd      	b.n	1954 <_svfiprintf_r+0x90>
    19b8:	9b05      	ldr	r3, [sp, #20]
    19ba:	1d18      	adds	r0, r3, #4
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	9005      	str	r0, [sp, #20]
    19c0:	2b00      	cmp	r3, #0
    19c2:	db39      	blt.n	1a38 <_svfiprintf_r+0x174>
    19c4:	9309      	str	r3, [sp, #36]	; 0x24
    19c6:	0014      	movs	r4, r2
    19c8:	7823      	ldrb	r3, [r4, #0]
    19ca:	2b2e      	cmp	r3, #46	; 0x2e
    19cc:	d10b      	bne.n	19e6 <_svfiprintf_r+0x122>
    19ce:	7863      	ldrb	r3, [r4, #1]
    19d0:	1c62      	adds	r2, r4, #1
    19d2:	2b2a      	cmp	r3, #42	; 0x2a
    19d4:	d13e      	bne.n	1a54 <_svfiprintf_r+0x190>
    19d6:	9b05      	ldr	r3, [sp, #20]
    19d8:	3402      	adds	r4, #2
    19da:	1d1a      	adds	r2, r3, #4
    19dc:	681b      	ldr	r3, [r3, #0]
    19de:	9205      	str	r2, [sp, #20]
    19e0:	2b00      	cmp	r3, #0
    19e2:	db34      	blt.n	1a4e <_svfiprintf_r+0x18a>
    19e4:	9307      	str	r3, [sp, #28]
    19e6:	4e35      	ldr	r6, [pc, #212]	; (1abc <_svfiprintf_r+0x1f8>)
    19e8:	7821      	ldrb	r1, [r4, #0]
    19ea:	2203      	movs	r2, #3
    19ec:	0030      	movs	r0, r6
    19ee:	f000 f9f5 	bl	1ddc <memchr>
    19f2:	2800      	cmp	r0, #0
    19f4:	d006      	beq.n	1a04 <_svfiprintf_r+0x140>
    19f6:	2340      	movs	r3, #64	; 0x40
    19f8:	1b80      	subs	r0, r0, r6
    19fa:	4083      	lsls	r3, r0
    19fc:	682a      	ldr	r2, [r5, #0]
    19fe:	3401      	adds	r4, #1
    1a00:	4313      	orrs	r3, r2
    1a02:	602b      	str	r3, [r5, #0]
    1a04:	7821      	ldrb	r1, [r4, #0]
    1a06:	2206      	movs	r2, #6
    1a08:	482d      	ldr	r0, [pc, #180]	; (1ac0 <_svfiprintf_r+0x1fc>)
    1a0a:	1c66      	adds	r6, r4, #1
    1a0c:	7629      	strb	r1, [r5, #24]
    1a0e:	f000 f9e5 	bl	1ddc <memchr>
    1a12:	2800      	cmp	r0, #0
    1a14:	d046      	beq.n	1aa4 <_svfiprintf_r+0x1e0>
    1a16:	4b2b      	ldr	r3, [pc, #172]	; (1ac4 <_svfiprintf_r+0x200>)
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d12f      	bne.n	1a7c <_svfiprintf_r+0x1b8>
    1a1c:	6829      	ldr	r1, [r5, #0]
    1a1e:	9b05      	ldr	r3, [sp, #20]
    1a20:	2207      	movs	r2, #7
    1a22:	05c9      	lsls	r1, r1, #23
    1a24:	d528      	bpl.n	1a78 <_svfiprintf_r+0x1b4>
    1a26:	189b      	adds	r3, r3, r2
    1a28:	4393      	bics	r3, r2
    1a2a:	3308      	adds	r3, #8
    1a2c:	9305      	str	r3, [sp, #20]
    1a2e:	696b      	ldr	r3, [r5, #20]
    1a30:	9a03      	ldr	r2, [sp, #12]
    1a32:	189b      	adds	r3, r3, r2
    1a34:	616b      	str	r3, [r5, #20]
    1a36:	e767      	b.n	1908 <_svfiprintf_r+0x44>
    1a38:	425b      	negs	r3, r3
    1a3a:	60eb      	str	r3, [r5, #12]
    1a3c:	2302      	movs	r3, #2
    1a3e:	430b      	orrs	r3, r1
    1a40:	602b      	str	r3, [r5, #0]
    1a42:	e7c0      	b.n	19c6 <_svfiprintf_r+0x102>
    1a44:	434b      	muls	r3, r1
    1a46:	3401      	adds	r4, #1
    1a48:	189b      	adds	r3, r3, r2
    1a4a:	2001      	movs	r0, #1
    1a4c:	e7a0      	b.n	1990 <_svfiprintf_r+0xcc>
    1a4e:	2301      	movs	r3, #1
    1a50:	425b      	negs	r3, r3
    1a52:	e7c7      	b.n	19e4 <_svfiprintf_r+0x120>
    1a54:	2300      	movs	r3, #0
    1a56:	0014      	movs	r4, r2
    1a58:	200a      	movs	r0, #10
    1a5a:	001a      	movs	r2, r3
    1a5c:	606b      	str	r3, [r5, #4]
    1a5e:	7821      	ldrb	r1, [r4, #0]
    1a60:	3930      	subs	r1, #48	; 0x30
    1a62:	2909      	cmp	r1, #9
    1a64:	d903      	bls.n	1a6e <_svfiprintf_r+0x1aa>
    1a66:	2b00      	cmp	r3, #0
    1a68:	d0bd      	beq.n	19e6 <_svfiprintf_r+0x122>
    1a6a:	9207      	str	r2, [sp, #28]
    1a6c:	e7bb      	b.n	19e6 <_svfiprintf_r+0x122>
    1a6e:	4342      	muls	r2, r0
    1a70:	3401      	adds	r4, #1
    1a72:	1852      	adds	r2, r2, r1
    1a74:	2301      	movs	r3, #1
    1a76:	e7f2      	b.n	1a5e <_svfiprintf_r+0x19a>
    1a78:	3307      	adds	r3, #7
    1a7a:	e7d5      	b.n	1a28 <_svfiprintf_r+0x164>
    1a7c:	ab05      	add	r3, sp, #20
    1a7e:	9300      	str	r3, [sp, #0]
    1a80:	003a      	movs	r2, r7
    1a82:	4b11      	ldr	r3, [pc, #68]	; (1ac8 <_svfiprintf_r+0x204>)
    1a84:	0029      	movs	r1, r5
    1a86:	9802      	ldr	r0, [sp, #8]
    1a88:	e000      	b.n	1a8c <_svfiprintf_r+0x1c8>
    1a8a:	bf00      	nop
    1a8c:	9003      	str	r0, [sp, #12]
    1a8e:	9b03      	ldr	r3, [sp, #12]
    1a90:	3301      	adds	r3, #1
    1a92:	d1cc      	bne.n	1a2e <_svfiprintf_r+0x16a>
    1a94:	89bb      	ldrh	r3, [r7, #12]
    1a96:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a98:	065b      	lsls	r3, r3, #25
    1a9a:	d400      	bmi.n	1a9e <_svfiprintf_r+0x1da>
    1a9c:	e729      	b.n	18f2 <_svfiprintf_r+0x2e>
    1a9e:	2001      	movs	r0, #1
    1aa0:	4240      	negs	r0, r0
    1aa2:	e726      	b.n	18f2 <_svfiprintf_r+0x2e>
    1aa4:	ab05      	add	r3, sp, #20
    1aa6:	9300      	str	r3, [sp, #0]
    1aa8:	003a      	movs	r2, r7
    1aaa:	4b07      	ldr	r3, [pc, #28]	; (1ac8 <_svfiprintf_r+0x204>)
    1aac:	0029      	movs	r1, r5
    1aae:	9802      	ldr	r0, [sp, #8]
    1ab0:	f000 f87a 	bl	1ba8 <_printf_i>
    1ab4:	e7ea      	b.n	1a8c <_svfiprintf_r+0x1c8>
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	0000216c 	.word	0x0000216c
    1abc:	00002172 	.word	0x00002172
    1ac0:	00002176 	.word	0x00002176
    1ac4:	00000000 	.word	0x00000000
    1ac8:	00001801 	.word	0x00001801

00001acc <_printf_common>:
    1acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ace:	0015      	movs	r5, r2
    1ad0:	9301      	str	r3, [sp, #4]
    1ad2:	688a      	ldr	r2, [r1, #8]
    1ad4:	690b      	ldr	r3, [r1, #16]
    1ad6:	9000      	str	r0, [sp, #0]
    1ad8:	000c      	movs	r4, r1
    1ada:	4293      	cmp	r3, r2
    1adc:	da00      	bge.n	1ae0 <_printf_common+0x14>
    1ade:	0013      	movs	r3, r2
    1ae0:	0022      	movs	r2, r4
    1ae2:	602b      	str	r3, [r5, #0]
    1ae4:	3243      	adds	r2, #67	; 0x43
    1ae6:	7812      	ldrb	r2, [r2, #0]
    1ae8:	2a00      	cmp	r2, #0
    1aea:	d001      	beq.n	1af0 <_printf_common+0x24>
    1aec:	3301      	adds	r3, #1
    1aee:	602b      	str	r3, [r5, #0]
    1af0:	6823      	ldr	r3, [r4, #0]
    1af2:	069b      	lsls	r3, r3, #26
    1af4:	d502      	bpl.n	1afc <_printf_common+0x30>
    1af6:	682b      	ldr	r3, [r5, #0]
    1af8:	3302      	adds	r3, #2
    1afa:	602b      	str	r3, [r5, #0]
    1afc:	2706      	movs	r7, #6
    1afe:	6823      	ldr	r3, [r4, #0]
    1b00:	401f      	ands	r7, r3
    1b02:	d027      	beq.n	1b54 <_printf_common+0x88>
    1b04:	0023      	movs	r3, r4
    1b06:	3343      	adds	r3, #67	; 0x43
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	1e5a      	subs	r2, r3, #1
    1b0c:	4193      	sbcs	r3, r2
    1b0e:	6822      	ldr	r2, [r4, #0]
    1b10:	0692      	lsls	r2, r2, #26
    1b12:	d430      	bmi.n	1b76 <_printf_common+0xaa>
    1b14:	0022      	movs	r2, r4
    1b16:	9901      	ldr	r1, [sp, #4]
    1b18:	3243      	adds	r2, #67	; 0x43
    1b1a:	9800      	ldr	r0, [sp, #0]
    1b1c:	9e08      	ldr	r6, [sp, #32]
    1b1e:	47b0      	blx	r6
    1b20:	1c43      	adds	r3, r0, #1
    1b22:	d025      	beq.n	1b70 <_printf_common+0xa4>
    1b24:	2306      	movs	r3, #6
    1b26:	6820      	ldr	r0, [r4, #0]
    1b28:	682a      	ldr	r2, [r5, #0]
    1b2a:	68e1      	ldr	r1, [r4, #12]
    1b2c:	4003      	ands	r3, r0
    1b2e:	2500      	movs	r5, #0
    1b30:	2b04      	cmp	r3, #4
    1b32:	d103      	bne.n	1b3c <_printf_common+0x70>
    1b34:	1a8d      	subs	r5, r1, r2
    1b36:	43eb      	mvns	r3, r5
    1b38:	17db      	asrs	r3, r3, #31
    1b3a:	401d      	ands	r5, r3
    1b3c:	68a3      	ldr	r3, [r4, #8]
    1b3e:	6922      	ldr	r2, [r4, #16]
    1b40:	4293      	cmp	r3, r2
    1b42:	dd01      	ble.n	1b48 <_printf_common+0x7c>
    1b44:	1a9b      	subs	r3, r3, r2
    1b46:	18ed      	adds	r5, r5, r3
    1b48:	2700      	movs	r7, #0
    1b4a:	42bd      	cmp	r5, r7
    1b4c:	d120      	bne.n	1b90 <_printf_common+0xc4>
    1b4e:	2000      	movs	r0, #0
    1b50:	e010      	b.n	1b74 <_printf_common+0xa8>
    1b52:	3701      	adds	r7, #1
    1b54:	68e3      	ldr	r3, [r4, #12]
    1b56:	682a      	ldr	r2, [r5, #0]
    1b58:	1a9b      	subs	r3, r3, r2
    1b5a:	429f      	cmp	r7, r3
    1b5c:	dad2      	bge.n	1b04 <_printf_common+0x38>
    1b5e:	0022      	movs	r2, r4
    1b60:	2301      	movs	r3, #1
    1b62:	3219      	adds	r2, #25
    1b64:	9901      	ldr	r1, [sp, #4]
    1b66:	9800      	ldr	r0, [sp, #0]
    1b68:	9e08      	ldr	r6, [sp, #32]
    1b6a:	47b0      	blx	r6
    1b6c:	1c43      	adds	r3, r0, #1
    1b6e:	d1f0      	bne.n	1b52 <_printf_common+0x86>
    1b70:	2001      	movs	r0, #1
    1b72:	4240      	negs	r0, r0
    1b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b76:	2030      	movs	r0, #48	; 0x30
    1b78:	18e1      	adds	r1, r4, r3
    1b7a:	3143      	adds	r1, #67	; 0x43
    1b7c:	7008      	strb	r0, [r1, #0]
    1b7e:	0021      	movs	r1, r4
    1b80:	1c5a      	adds	r2, r3, #1
    1b82:	3145      	adds	r1, #69	; 0x45
    1b84:	7809      	ldrb	r1, [r1, #0]
    1b86:	18a2      	adds	r2, r4, r2
    1b88:	3243      	adds	r2, #67	; 0x43
    1b8a:	3302      	adds	r3, #2
    1b8c:	7011      	strb	r1, [r2, #0]
    1b8e:	e7c1      	b.n	1b14 <_printf_common+0x48>
    1b90:	0022      	movs	r2, r4
    1b92:	2301      	movs	r3, #1
    1b94:	321a      	adds	r2, #26
    1b96:	9901      	ldr	r1, [sp, #4]
    1b98:	9800      	ldr	r0, [sp, #0]
    1b9a:	9e08      	ldr	r6, [sp, #32]
    1b9c:	47b0      	blx	r6
    1b9e:	1c43      	adds	r3, r0, #1
    1ba0:	d0e6      	beq.n	1b70 <_printf_common+0xa4>
    1ba2:	3701      	adds	r7, #1
    1ba4:	e7d1      	b.n	1b4a <_printf_common+0x7e>
	...

00001ba8 <_printf_i>:
    1ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1baa:	b08b      	sub	sp, #44	; 0x2c
    1bac:	9206      	str	r2, [sp, #24]
    1bae:	000a      	movs	r2, r1
    1bb0:	3243      	adds	r2, #67	; 0x43
    1bb2:	9307      	str	r3, [sp, #28]
    1bb4:	9005      	str	r0, [sp, #20]
    1bb6:	9204      	str	r2, [sp, #16]
    1bb8:	7e0a      	ldrb	r2, [r1, #24]
    1bba:	000c      	movs	r4, r1
    1bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1bbe:	2a6e      	cmp	r2, #110	; 0x6e
    1bc0:	d100      	bne.n	1bc4 <_printf_i+0x1c>
    1bc2:	e08f      	b.n	1ce4 <_printf_i+0x13c>
    1bc4:	d817      	bhi.n	1bf6 <_printf_i+0x4e>
    1bc6:	2a63      	cmp	r2, #99	; 0x63
    1bc8:	d02c      	beq.n	1c24 <_printf_i+0x7c>
    1bca:	d808      	bhi.n	1bde <_printf_i+0x36>
    1bcc:	2a00      	cmp	r2, #0
    1bce:	d100      	bne.n	1bd2 <_printf_i+0x2a>
    1bd0:	e099      	b.n	1d06 <_printf_i+0x15e>
    1bd2:	2a58      	cmp	r2, #88	; 0x58
    1bd4:	d054      	beq.n	1c80 <_printf_i+0xd8>
    1bd6:	0026      	movs	r6, r4
    1bd8:	3642      	adds	r6, #66	; 0x42
    1bda:	7032      	strb	r2, [r6, #0]
    1bdc:	e029      	b.n	1c32 <_printf_i+0x8a>
    1bde:	2a64      	cmp	r2, #100	; 0x64
    1be0:	d001      	beq.n	1be6 <_printf_i+0x3e>
    1be2:	2a69      	cmp	r2, #105	; 0x69
    1be4:	d1f7      	bne.n	1bd6 <_printf_i+0x2e>
    1be6:	6821      	ldr	r1, [r4, #0]
    1be8:	681a      	ldr	r2, [r3, #0]
    1bea:	0608      	lsls	r0, r1, #24
    1bec:	d523      	bpl.n	1c36 <_printf_i+0x8e>
    1bee:	1d11      	adds	r1, r2, #4
    1bf0:	6019      	str	r1, [r3, #0]
    1bf2:	6815      	ldr	r5, [r2, #0]
    1bf4:	e025      	b.n	1c42 <_printf_i+0x9a>
    1bf6:	2a73      	cmp	r2, #115	; 0x73
    1bf8:	d100      	bne.n	1bfc <_printf_i+0x54>
    1bfa:	e088      	b.n	1d0e <_printf_i+0x166>
    1bfc:	d808      	bhi.n	1c10 <_printf_i+0x68>
    1bfe:	2a6f      	cmp	r2, #111	; 0x6f
    1c00:	d029      	beq.n	1c56 <_printf_i+0xae>
    1c02:	2a70      	cmp	r2, #112	; 0x70
    1c04:	d1e7      	bne.n	1bd6 <_printf_i+0x2e>
    1c06:	2220      	movs	r2, #32
    1c08:	6809      	ldr	r1, [r1, #0]
    1c0a:	430a      	orrs	r2, r1
    1c0c:	6022      	str	r2, [r4, #0]
    1c0e:	e003      	b.n	1c18 <_printf_i+0x70>
    1c10:	2a75      	cmp	r2, #117	; 0x75
    1c12:	d020      	beq.n	1c56 <_printf_i+0xae>
    1c14:	2a78      	cmp	r2, #120	; 0x78
    1c16:	d1de      	bne.n	1bd6 <_printf_i+0x2e>
    1c18:	0022      	movs	r2, r4
    1c1a:	2178      	movs	r1, #120	; 0x78
    1c1c:	3245      	adds	r2, #69	; 0x45
    1c1e:	7011      	strb	r1, [r2, #0]
    1c20:	4a6c      	ldr	r2, [pc, #432]	; (1dd4 <_printf_i+0x22c>)
    1c22:	e030      	b.n	1c86 <_printf_i+0xde>
    1c24:	000e      	movs	r6, r1
    1c26:	681a      	ldr	r2, [r3, #0]
    1c28:	3642      	adds	r6, #66	; 0x42
    1c2a:	1d11      	adds	r1, r2, #4
    1c2c:	6019      	str	r1, [r3, #0]
    1c2e:	6813      	ldr	r3, [r2, #0]
    1c30:	7033      	strb	r3, [r6, #0]
    1c32:	2301      	movs	r3, #1
    1c34:	e079      	b.n	1d2a <_printf_i+0x182>
    1c36:	0649      	lsls	r1, r1, #25
    1c38:	d5d9      	bpl.n	1bee <_printf_i+0x46>
    1c3a:	1d11      	adds	r1, r2, #4
    1c3c:	6019      	str	r1, [r3, #0]
    1c3e:	2300      	movs	r3, #0
    1c40:	5ed5      	ldrsh	r5, [r2, r3]
    1c42:	2d00      	cmp	r5, #0
    1c44:	da03      	bge.n	1c4e <_printf_i+0xa6>
    1c46:	232d      	movs	r3, #45	; 0x2d
    1c48:	9a04      	ldr	r2, [sp, #16]
    1c4a:	426d      	negs	r5, r5
    1c4c:	7013      	strb	r3, [r2, #0]
    1c4e:	4b62      	ldr	r3, [pc, #392]	; (1dd8 <_printf_i+0x230>)
    1c50:	270a      	movs	r7, #10
    1c52:	9303      	str	r3, [sp, #12]
    1c54:	e02f      	b.n	1cb6 <_printf_i+0x10e>
    1c56:	6820      	ldr	r0, [r4, #0]
    1c58:	6819      	ldr	r1, [r3, #0]
    1c5a:	0605      	lsls	r5, r0, #24
    1c5c:	d503      	bpl.n	1c66 <_printf_i+0xbe>
    1c5e:	1d08      	adds	r0, r1, #4
    1c60:	6018      	str	r0, [r3, #0]
    1c62:	680d      	ldr	r5, [r1, #0]
    1c64:	e005      	b.n	1c72 <_printf_i+0xca>
    1c66:	0640      	lsls	r0, r0, #25
    1c68:	d5f9      	bpl.n	1c5e <_printf_i+0xb6>
    1c6a:	680d      	ldr	r5, [r1, #0]
    1c6c:	1d08      	adds	r0, r1, #4
    1c6e:	6018      	str	r0, [r3, #0]
    1c70:	b2ad      	uxth	r5, r5
    1c72:	4b59      	ldr	r3, [pc, #356]	; (1dd8 <_printf_i+0x230>)
    1c74:	2708      	movs	r7, #8
    1c76:	9303      	str	r3, [sp, #12]
    1c78:	2a6f      	cmp	r2, #111	; 0x6f
    1c7a:	d018      	beq.n	1cae <_printf_i+0x106>
    1c7c:	270a      	movs	r7, #10
    1c7e:	e016      	b.n	1cae <_printf_i+0x106>
    1c80:	3145      	adds	r1, #69	; 0x45
    1c82:	700a      	strb	r2, [r1, #0]
    1c84:	4a54      	ldr	r2, [pc, #336]	; (1dd8 <_printf_i+0x230>)
    1c86:	9203      	str	r2, [sp, #12]
    1c88:	681a      	ldr	r2, [r3, #0]
    1c8a:	6821      	ldr	r1, [r4, #0]
    1c8c:	1d10      	adds	r0, r2, #4
    1c8e:	6018      	str	r0, [r3, #0]
    1c90:	6815      	ldr	r5, [r2, #0]
    1c92:	0608      	lsls	r0, r1, #24
    1c94:	d522      	bpl.n	1cdc <_printf_i+0x134>
    1c96:	07cb      	lsls	r3, r1, #31
    1c98:	d502      	bpl.n	1ca0 <_printf_i+0xf8>
    1c9a:	2320      	movs	r3, #32
    1c9c:	4319      	orrs	r1, r3
    1c9e:	6021      	str	r1, [r4, #0]
    1ca0:	2710      	movs	r7, #16
    1ca2:	2d00      	cmp	r5, #0
    1ca4:	d103      	bne.n	1cae <_printf_i+0x106>
    1ca6:	2320      	movs	r3, #32
    1ca8:	6822      	ldr	r2, [r4, #0]
    1caa:	439a      	bics	r2, r3
    1cac:	6022      	str	r2, [r4, #0]
    1cae:	0023      	movs	r3, r4
    1cb0:	2200      	movs	r2, #0
    1cb2:	3343      	adds	r3, #67	; 0x43
    1cb4:	701a      	strb	r2, [r3, #0]
    1cb6:	6863      	ldr	r3, [r4, #4]
    1cb8:	60a3      	str	r3, [r4, #8]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	db5c      	blt.n	1d78 <_printf_i+0x1d0>
    1cbe:	2204      	movs	r2, #4
    1cc0:	6821      	ldr	r1, [r4, #0]
    1cc2:	4391      	bics	r1, r2
    1cc4:	6021      	str	r1, [r4, #0]
    1cc6:	2d00      	cmp	r5, #0
    1cc8:	d158      	bne.n	1d7c <_printf_i+0x1d4>
    1cca:	9e04      	ldr	r6, [sp, #16]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d064      	beq.n	1d9a <_printf_i+0x1f2>
    1cd0:	0026      	movs	r6, r4
    1cd2:	9b03      	ldr	r3, [sp, #12]
    1cd4:	3642      	adds	r6, #66	; 0x42
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	7033      	strb	r3, [r6, #0]
    1cda:	e05e      	b.n	1d9a <_printf_i+0x1f2>
    1cdc:	0648      	lsls	r0, r1, #25
    1cde:	d5da      	bpl.n	1c96 <_printf_i+0xee>
    1ce0:	b2ad      	uxth	r5, r5
    1ce2:	e7d8      	b.n	1c96 <_printf_i+0xee>
    1ce4:	6809      	ldr	r1, [r1, #0]
    1ce6:	681a      	ldr	r2, [r3, #0]
    1ce8:	0608      	lsls	r0, r1, #24
    1cea:	d505      	bpl.n	1cf8 <_printf_i+0x150>
    1cec:	1d11      	adds	r1, r2, #4
    1cee:	6019      	str	r1, [r3, #0]
    1cf0:	6813      	ldr	r3, [r2, #0]
    1cf2:	6962      	ldr	r2, [r4, #20]
    1cf4:	601a      	str	r2, [r3, #0]
    1cf6:	e006      	b.n	1d06 <_printf_i+0x15e>
    1cf8:	0649      	lsls	r1, r1, #25
    1cfa:	d5f7      	bpl.n	1cec <_printf_i+0x144>
    1cfc:	1d11      	adds	r1, r2, #4
    1cfe:	6019      	str	r1, [r3, #0]
    1d00:	6813      	ldr	r3, [r2, #0]
    1d02:	8aa2      	ldrh	r2, [r4, #20]
    1d04:	801a      	strh	r2, [r3, #0]
    1d06:	2300      	movs	r3, #0
    1d08:	9e04      	ldr	r6, [sp, #16]
    1d0a:	6123      	str	r3, [r4, #16]
    1d0c:	e054      	b.n	1db8 <_printf_i+0x210>
    1d0e:	681a      	ldr	r2, [r3, #0]
    1d10:	1d11      	adds	r1, r2, #4
    1d12:	6019      	str	r1, [r3, #0]
    1d14:	6816      	ldr	r6, [r2, #0]
    1d16:	2100      	movs	r1, #0
    1d18:	6862      	ldr	r2, [r4, #4]
    1d1a:	0030      	movs	r0, r6
    1d1c:	f000 f85e 	bl	1ddc <memchr>
    1d20:	2800      	cmp	r0, #0
    1d22:	d001      	beq.n	1d28 <_printf_i+0x180>
    1d24:	1b80      	subs	r0, r0, r6
    1d26:	6060      	str	r0, [r4, #4]
    1d28:	6863      	ldr	r3, [r4, #4]
    1d2a:	6123      	str	r3, [r4, #16]
    1d2c:	2300      	movs	r3, #0
    1d2e:	9a04      	ldr	r2, [sp, #16]
    1d30:	7013      	strb	r3, [r2, #0]
    1d32:	e041      	b.n	1db8 <_printf_i+0x210>
    1d34:	6923      	ldr	r3, [r4, #16]
    1d36:	0032      	movs	r2, r6
    1d38:	9906      	ldr	r1, [sp, #24]
    1d3a:	9805      	ldr	r0, [sp, #20]
    1d3c:	9d07      	ldr	r5, [sp, #28]
    1d3e:	47a8      	blx	r5
    1d40:	1c43      	adds	r3, r0, #1
    1d42:	d043      	beq.n	1dcc <_printf_i+0x224>
    1d44:	6823      	ldr	r3, [r4, #0]
    1d46:	2500      	movs	r5, #0
    1d48:	079b      	lsls	r3, r3, #30
    1d4a:	d40f      	bmi.n	1d6c <_printf_i+0x1c4>
    1d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d4e:	68e0      	ldr	r0, [r4, #12]
    1d50:	4298      	cmp	r0, r3
    1d52:	da3d      	bge.n	1dd0 <_printf_i+0x228>
    1d54:	0018      	movs	r0, r3
    1d56:	e03b      	b.n	1dd0 <_printf_i+0x228>
    1d58:	0022      	movs	r2, r4
    1d5a:	2301      	movs	r3, #1
    1d5c:	3219      	adds	r2, #25
    1d5e:	9906      	ldr	r1, [sp, #24]
    1d60:	9805      	ldr	r0, [sp, #20]
    1d62:	9e07      	ldr	r6, [sp, #28]
    1d64:	47b0      	blx	r6
    1d66:	1c43      	adds	r3, r0, #1
    1d68:	d030      	beq.n	1dcc <_printf_i+0x224>
    1d6a:	3501      	adds	r5, #1
    1d6c:	68e3      	ldr	r3, [r4, #12]
    1d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d70:	1a9b      	subs	r3, r3, r2
    1d72:	429d      	cmp	r5, r3
    1d74:	dbf0      	blt.n	1d58 <_printf_i+0x1b0>
    1d76:	e7e9      	b.n	1d4c <_printf_i+0x1a4>
    1d78:	2d00      	cmp	r5, #0
    1d7a:	d0a9      	beq.n	1cd0 <_printf_i+0x128>
    1d7c:	9e04      	ldr	r6, [sp, #16]
    1d7e:	0028      	movs	r0, r5
    1d80:	0039      	movs	r1, r7
    1d82:	f7ff fbd5 	bl	1530 <__aeabi_uidivmod>
    1d86:	9b03      	ldr	r3, [sp, #12]
    1d88:	3e01      	subs	r6, #1
    1d8a:	5c5b      	ldrb	r3, [r3, r1]
    1d8c:	0028      	movs	r0, r5
    1d8e:	7033      	strb	r3, [r6, #0]
    1d90:	0039      	movs	r1, r7
    1d92:	f7ff fb47 	bl	1424 <__udivsi3>
    1d96:	1e05      	subs	r5, r0, #0
    1d98:	d1f1      	bne.n	1d7e <_printf_i+0x1d6>
    1d9a:	2f08      	cmp	r7, #8
    1d9c:	d109      	bne.n	1db2 <_printf_i+0x20a>
    1d9e:	6823      	ldr	r3, [r4, #0]
    1da0:	07db      	lsls	r3, r3, #31
    1da2:	d506      	bpl.n	1db2 <_printf_i+0x20a>
    1da4:	6863      	ldr	r3, [r4, #4]
    1da6:	6922      	ldr	r2, [r4, #16]
    1da8:	4293      	cmp	r3, r2
    1daa:	dc02      	bgt.n	1db2 <_printf_i+0x20a>
    1dac:	2330      	movs	r3, #48	; 0x30
    1dae:	3e01      	subs	r6, #1
    1db0:	7033      	strb	r3, [r6, #0]
    1db2:	9b04      	ldr	r3, [sp, #16]
    1db4:	1b9b      	subs	r3, r3, r6
    1db6:	6123      	str	r3, [r4, #16]
    1db8:	9b07      	ldr	r3, [sp, #28]
    1dba:	aa09      	add	r2, sp, #36	; 0x24
    1dbc:	9300      	str	r3, [sp, #0]
    1dbe:	0021      	movs	r1, r4
    1dc0:	9b06      	ldr	r3, [sp, #24]
    1dc2:	9805      	ldr	r0, [sp, #20]
    1dc4:	f7ff fe82 	bl	1acc <_printf_common>
    1dc8:	1c43      	adds	r3, r0, #1
    1dca:	d1b3      	bne.n	1d34 <_printf_i+0x18c>
    1dcc:	2001      	movs	r0, #1
    1dce:	4240      	negs	r0, r0
    1dd0:	b00b      	add	sp, #44	; 0x2c
    1dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd4:	0000218e 	.word	0x0000218e
    1dd8:	0000217d 	.word	0x0000217d

00001ddc <memchr>:
    1ddc:	b2c9      	uxtb	r1, r1
    1dde:	1882      	adds	r2, r0, r2
    1de0:	4290      	cmp	r0, r2
    1de2:	d101      	bne.n	1de8 <memchr+0xc>
    1de4:	2000      	movs	r0, #0
    1de6:	4770      	bx	lr
    1de8:	7803      	ldrb	r3, [r0, #0]
    1dea:	428b      	cmp	r3, r1
    1dec:	d0fb      	beq.n	1de6 <memchr+0xa>
    1dee:	3001      	adds	r0, #1
    1df0:	e7f6      	b.n	1de0 <memchr+0x4>

00001df2 <memmove>:
    1df2:	b510      	push	{r4, lr}
    1df4:	4288      	cmp	r0, r1
    1df6:	d902      	bls.n	1dfe <memmove+0xc>
    1df8:	188b      	adds	r3, r1, r2
    1dfa:	4298      	cmp	r0, r3
    1dfc:	d308      	bcc.n	1e10 <memmove+0x1e>
    1dfe:	2300      	movs	r3, #0
    1e00:	429a      	cmp	r2, r3
    1e02:	d007      	beq.n	1e14 <memmove+0x22>
    1e04:	5ccc      	ldrb	r4, [r1, r3]
    1e06:	54c4      	strb	r4, [r0, r3]
    1e08:	3301      	adds	r3, #1
    1e0a:	e7f9      	b.n	1e00 <memmove+0xe>
    1e0c:	5c8b      	ldrb	r3, [r1, r2]
    1e0e:	5483      	strb	r3, [r0, r2]
    1e10:	3a01      	subs	r2, #1
    1e12:	d2fb      	bcs.n	1e0c <memmove+0x1a>
    1e14:	bd10      	pop	{r4, pc}
	...

00001e18 <_free_r>:
    1e18:	b570      	push	{r4, r5, r6, lr}
    1e1a:	0005      	movs	r5, r0
    1e1c:	2900      	cmp	r1, #0
    1e1e:	d010      	beq.n	1e42 <_free_r+0x2a>
    1e20:	1f0c      	subs	r4, r1, #4
    1e22:	6823      	ldr	r3, [r4, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	da00      	bge.n	1e2a <_free_r+0x12>
    1e28:	18e4      	adds	r4, r4, r3
    1e2a:	0028      	movs	r0, r5
    1e2c:	f000 f8d4 	bl	1fd8 <__malloc_lock>
    1e30:	4a1d      	ldr	r2, [pc, #116]	; (1ea8 <_free_r+0x90>)
    1e32:	6813      	ldr	r3, [r2, #0]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d105      	bne.n	1e44 <_free_r+0x2c>
    1e38:	6063      	str	r3, [r4, #4]
    1e3a:	6014      	str	r4, [r2, #0]
    1e3c:	0028      	movs	r0, r5
    1e3e:	f000 f8cc 	bl	1fda <__malloc_unlock>
    1e42:	bd70      	pop	{r4, r5, r6, pc}
    1e44:	42a3      	cmp	r3, r4
    1e46:	d909      	bls.n	1e5c <_free_r+0x44>
    1e48:	6821      	ldr	r1, [r4, #0]
    1e4a:	1860      	adds	r0, r4, r1
    1e4c:	4283      	cmp	r3, r0
    1e4e:	d1f3      	bne.n	1e38 <_free_r+0x20>
    1e50:	6818      	ldr	r0, [r3, #0]
    1e52:	685b      	ldr	r3, [r3, #4]
    1e54:	1841      	adds	r1, r0, r1
    1e56:	6021      	str	r1, [r4, #0]
    1e58:	e7ee      	b.n	1e38 <_free_r+0x20>
    1e5a:	0013      	movs	r3, r2
    1e5c:	685a      	ldr	r2, [r3, #4]
    1e5e:	2a00      	cmp	r2, #0
    1e60:	d001      	beq.n	1e66 <_free_r+0x4e>
    1e62:	42a2      	cmp	r2, r4
    1e64:	d9f9      	bls.n	1e5a <_free_r+0x42>
    1e66:	6819      	ldr	r1, [r3, #0]
    1e68:	1858      	adds	r0, r3, r1
    1e6a:	42a0      	cmp	r0, r4
    1e6c:	d10b      	bne.n	1e86 <_free_r+0x6e>
    1e6e:	6820      	ldr	r0, [r4, #0]
    1e70:	1809      	adds	r1, r1, r0
    1e72:	1858      	adds	r0, r3, r1
    1e74:	6019      	str	r1, [r3, #0]
    1e76:	4282      	cmp	r2, r0
    1e78:	d1e0      	bne.n	1e3c <_free_r+0x24>
    1e7a:	6810      	ldr	r0, [r2, #0]
    1e7c:	6852      	ldr	r2, [r2, #4]
    1e7e:	1841      	adds	r1, r0, r1
    1e80:	6019      	str	r1, [r3, #0]
    1e82:	605a      	str	r2, [r3, #4]
    1e84:	e7da      	b.n	1e3c <_free_r+0x24>
    1e86:	42a0      	cmp	r0, r4
    1e88:	d902      	bls.n	1e90 <_free_r+0x78>
    1e8a:	230c      	movs	r3, #12
    1e8c:	602b      	str	r3, [r5, #0]
    1e8e:	e7d5      	b.n	1e3c <_free_r+0x24>
    1e90:	6821      	ldr	r1, [r4, #0]
    1e92:	1860      	adds	r0, r4, r1
    1e94:	4282      	cmp	r2, r0
    1e96:	d103      	bne.n	1ea0 <_free_r+0x88>
    1e98:	6810      	ldr	r0, [r2, #0]
    1e9a:	6852      	ldr	r2, [r2, #4]
    1e9c:	1841      	adds	r1, r0, r1
    1e9e:	6021      	str	r1, [r4, #0]
    1ea0:	6062      	str	r2, [r4, #4]
    1ea2:	605c      	str	r4, [r3, #4]
    1ea4:	e7ca      	b.n	1e3c <_free_r+0x24>
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	200000c0 	.word	0x200000c0

00001eac <_malloc_r>:
    1eac:	2303      	movs	r3, #3
    1eae:	b570      	push	{r4, r5, r6, lr}
    1eb0:	1ccd      	adds	r5, r1, #3
    1eb2:	439d      	bics	r5, r3
    1eb4:	3508      	adds	r5, #8
    1eb6:	0006      	movs	r6, r0
    1eb8:	2d0c      	cmp	r5, #12
    1eba:	d21e      	bcs.n	1efa <_malloc_r+0x4e>
    1ebc:	250c      	movs	r5, #12
    1ebe:	42a9      	cmp	r1, r5
    1ec0:	d81d      	bhi.n	1efe <_malloc_r+0x52>
    1ec2:	0030      	movs	r0, r6
    1ec4:	f000 f888 	bl	1fd8 <__malloc_lock>
    1ec8:	4a25      	ldr	r2, [pc, #148]	; (1f60 <_malloc_r+0xb4>)
    1eca:	6814      	ldr	r4, [r2, #0]
    1ecc:	0021      	movs	r1, r4
    1ece:	2900      	cmp	r1, #0
    1ed0:	d119      	bne.n	1f06 <_malloc_r+0x5a>
    1ed2:	4c24      	ldr	r4, [pc, #144]	; (1f64 <_malloc_r+0xb8>)
    1ed4:	6823      	ldr	r3, [r4, #0]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d103      	bne.n	1ee2 <_malloc_r+0x36>
    1eda:	0030      	movs	r0, r6
    1edc:	f000 f86a 	bl	1fb4 <_sbrk_r>
    1ee0:	6020      	str	r0, [r4, #0]
    1ee2:	0029      	movs	r1, r5
    1ee4:	0030      	movs	r0, r6
    1ee6:	f000 f865 	bl	1fb4 <_sbrk_r>
    1eea:	1c43      	adds	r3, r0, #1
    1eec:	d12c      	bne.n	1f48 <_malloc_r+0x9c>
    1eee:	230c      	movs	r3, #12
    1ef0:	0030      	movs	r0, r6
    1ef2:	6033      	str	r3, [r6, #0]
    1ef4:	f000 f871 	bl	1fda <__malloc_unlock>
    1ef8:	e003      	b.n	1f02 <_malloc_r+0x56>
    1efa:	2d00      	cmp	r5, #0
    1efc:	dadf      	bge.n	1ebe <_malloc_r+0x12>
    1efe:	230c      	movs	r3, #12
    1f00:	6033      	str	r3, [r6, #0]
    1f02:	2000      	movs	r0, #0
    1f04:	bd70      	pop	{r4, r5, r6, pc}
    1f06:	680b      	ldr	r3, [r1, #0]
    1f08:	1b5b      	subs	r3, r3, r5
    1f0a:	d41a      	bmi.n	1f42 <_malloc_r+0x96>
    1f0c:	2b0b      	cmp	r3, #11
    1f0e:	d903      	bls.n	1f18 <_malloc_r+0x6c>
    1f10:	600b      	str	r3, [r1, #0]
    1f12:	18cc      	adds	r4, r1, r3
    1f14:	6025      	str	r5, [r4, #0]
    1f16:	e003      	b.n	1f20 <_malloc_r+0x74>
    1f18:	428c      	cmp	r4, r1
    1f1a:	d10e      	bne.n	1f3a <_malloc_r+0x8e>
    1f1c:	6863      	ldr	r3, [r4, #4]
    1f1e:	6013      	str	r3, [r2, #0]
    1f20:	0030      	movs	r0, r6
    1f22:	f000 f85a 	bl	1fda <__malloc_unlock>
    1f26:	0020      	movs	r0, r4
    1f28:	2207      	movs	r2, #7
    1f2a:	300b      	adds	r0, #11
    1f2c:	1d23      	adds	r3, r4, #4
    1f2e:	4390      	bics	r0, r2
    1f30:	1ac3      	subs	r3, r0, r3
    1f32:	d0e7      	beq.n	1f04 <_malloc_r+0x58>
    1f34:	425a      	negs	r2, r3
    1f36:	50e2      	str	r2, [r4, r3]
    1f38:	e7e4      	b.n	1f04 <_malloc_r+0x58>
    1f3a:	684b      	ldr	r3, [r1, #4]
    1f3c:	6063      	str	r3, [r4, #4]
    1f3e:	000c      	movs	r4, r1
    1f40:	e7ee      	b.n	1f20 <_malloc_r+0x74>
    1f42:	000c      	movs	r4, r1
    1f44:	6849      	ldr	r1, [r1, #4]
    1f46:	e7c2      	b.n	1ece <_malloc_r+0x22>
    1f48:	2303      	movs	r3, #3
    1f4a:	1cc4      	adds	r4, r0, #3
    1f4c:	439c      	bics	r4, r3
    1f4e:	42a0      	cmp	r0, r4
    1f50:	d0e0      	beq.n	1f14 <_malloc_r+0x68>
    1f52:	1a21      	subs	r1, r4, r0
    1f54:	0030      	movs	r0, r6
    1f56:	f000 f82d 	bl	1fb4 <_sbrk_r>
    1f5a:	1c43      	adds	r3, r0, #1
    1f5c:	d1da      	bne.n	1f14 <_malloc_r+0x68>
    1f5e:	e7c6      	b.n	1eee <_malloc_r+0x42>
    1f60:	200000c0 	.word	0x200000c0
    1f64:	200000c4 	.word	0x200000c4

00001f68 <_realloc_r>:
    1f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f6a:	0007      	movs	r7, r0
    1f6c:	000d      	movs	r5, r1
    1f6e:	0016      	movs	r6, r2
    1f70:	2900      	cmp	r1, #0
    1f72:	d105      	bne.n	1f80 <_realloc_r+0x18>
    1f74:	0011      	movs	r1, r2
    1f76:	f7ff ff99 	bl	1eac <_malloc_r>
    1f7a:	0004      	movs	r4, r0
    1f7c:	0020      	movs	r0, r4
    1f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f80:	2a00      	cmp	r2, #0
    1f82:	d103      	bne.n	1f8c <_realloc_r+0x24>
    1f84:	f7ff ff48 	bl	1e18 <_free_r>
    1f88:	0034      	movs	r4, r6
    1f8a:	e7f7      	b.n	1f7c <_realloc_r+0x14>
    1f8c:	f000 f826 	bl	1fdc <_malloc_usable_size_r>
    1f90:	002c      	movs	r4, r5
    1f92:	4286      	cmp	r6, r0
    1f94:	d9f2      	bls.n	1f7c <_realloc_r+0x14>
    1f96:	0031      	movs	r1, r6
    1f98:	0038      	movs	r0, r7
    1f9a:	f7ff ff87 	bl	1eac <_malloc_r>
    1f9e:	1e04      	subs	r4, r0, #0
    1fa0:	d0ec      	beq.n	1f7c <_realloc_r+0x14>
    1fa2:	0029      	movs	r1, r5
    1fa4:	0032      	movs	r2, r6
    1fa6:	f7ff fbf7 	bl	1798 <memcpy>
    1faa:	0029      	movs	r1, r5
    1fac:	0038      	movs	r0, r7
    1fae:	f7ff ff33 	bl	1e18 <_free_r>
    1fb2:	e7e3      	b.n	1f7c <_realloc_r+0x14>

00001fb4 <_sbrk_r>:
    1fb4:	2300      	movs	r3, #0
    1fb6:	b570      	push	{r4, r5, r6, lr}
    1fb8:	4c06      	ldr	r4, [pc, #24]	; (1fd4 <_sbrk_r+0x20>)
    1fba:	0005      	movs	r5, r0
    1fbc:	0008      	movs	r0, r1
    1fbe:	6023      	str	r3, [r4, #0]
    1fc0:	f7ff f90c 	bl	11dc <_sbrk>
    1fc4:	1c43      	adds	r3, r0, #1
    1fc6:	d103      	bne.n	1fd0 <_sbrk_r+0x1c>
    1fc8:	6823      	ldr	r3, [r4, #0]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d000      	beq.n	1fd0 <_sbrk_r+0x1c>
    1fce:	602b      	str	r3, [r5, #0]
    1fd0:	bd70      	pop	{r4, r5, r6, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	20000164 	.word	0x20000164

00001fd8 <__malloc_lock>:
    1fd8:	4770      	bx	lr

00001fda <__malloc_unlock>:
    1fda:	4770      	bx	lr

00001fdc <_malloc_usable_size_r>:
    1fdc:	1f0b      	subs	r3, r1, #4
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	1f18      	subs	r0, r3, #4
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	da01      	bge.n	1fea <_malloc_usable_size_r+0xe>
    1fe6:	580b      	ldr	r3, [r1, r0]
    1fe8:	18c0      	adds	r0, r0, r3
    1fea:	4770      	bx	lr
    1fec:	00000326 	.word	0x00000326
    1ff0:	00000572 	.word	0x00000572
    1ff4:	00000572 	.word	0x00000572
    1ff8:	00000572 	.word	0x00000572
    1ffc:	00000572 	.word	0x00000572
    2000:	00000572 	.word	0x00000572
    2004:	00000572 	.word	0x00000572
    2008:	00000572 	.word	0x00000572
    200c:	00000572 	.word	0x00000572
    2010:	00000572 	.word	0x00000572
    2014:	00000572 	.word	0x00000572
    2018:	00000572 	.word	0x00000572
    201c:	00000572 	.word	0x00000572
    2020:	00000572 	.word	0x00000572
    2024:	00000572 	.word	0x00000572
    2028:	00000572 	.word	0x00000572
    202c:	0000030e 	.word	0x0000030e
    2030:	00000572 	.word	0x00000572
    2034:	00000572 	.word	0x00000572
    2038:	00000572 	.word	0x00000572
    203c:	00000572 	.word	0x00000572
    2040:	00000572 	.word	0x00000572
    2044:	00000572 	.word	0x00000572
    2048:	00000572 	.word	0x00000572
    204c:	00000572 	.word	0x00000572
    2050:	00000572 	.word	0x00000572
    2054:	00000572 	.word	0x00000572
    2058:	00000572 	.word	0x00000572
    205c:	00000572 	.word	0x00000572
    2060:	00000572 	.word	0x00000572
    2064:	00000572 	.word	0x00000572
    2068:	00000572 	.word	0x00000572
    206c:	0000031e 	.word	0x0000031e
    2070:	00000572 	.word	0x00000572
    2074:	00000572 	.word	0x00000572
    2078:	00000572 	.word	0x00000572
    207c:	00000572 	.word	0x00000572
    2080:	00000572 	.word	0x00000572
    2084:	00000572 	.word	0x00000572
    2088:	00000572 	.word	0x00000572
    208c:	00000572 	.word	0x00000572
    2090:	00000572 	.word	0x00000572
    2094:	00000572 	.word	0x00000572
    2098:	00000572 	.word	0x00000572
    209c:	00000572 	.word	0x00000572
    20a0:	00000572 	.word	0x00000572
    20a4:	00000572 	.word	0x00000572
    20a8:	00000572 	.word	0x00000572
    20ac:	00000316 	.word	0x00000316
    20b0:	0000032e 	.word	0x0000032e
    20b4:	000002f6 	.word	0x000002f6
    20b8:	00000306 	.word	0x00000306
    20bc:	000002fe 	.word	0x000002fe
    20c0:	00000002 	.word	0x00000002
    20c4:	00000003 	.word	0x00000003
    20c8:	00000028 	.word	0x00000028
    20cc:	00000029 	.word	0x00000029
    20d0:	00000004 	.word	0x00000004
    20d4:	00000005 	.word	0x00000005
    20d8:	00000006 	.word	0x00000006
    20dc:	00000007 	.word	0x00000007
    20e0:	00000020 	.word	0x00000020
    20e4:	00000021 	.word	0x00000021
    20e8:	00000022 	.word	0x00000022
    20ec:	00000023 	.word	0x00000023
    20f0:	00000024 	.word	0x00000024
    20f4:	00000025 	.word	0x00000025
    20f8:	00000026 	.word	0x00000026
    20fc:	00000027 	.word	0x00000027
    2100:	00000008 	.word	0x00000008
    2104:	00000009 	.word	0x00000009
    2108:	0000000a 	.word	0x0000000a
    210c:	0000000b 	.word	0x0000000b
    2110:	000008ea 	.word	0x000008ea
    2114:	000008e6 	.word	0x000008e6
    2118:	000008e6 	.word	0x000008e6
    211c:	0000094c 	.word	0x0000094c
    2120:	0000094c 	.word	0x0000094c
    2124:	000008fe 	.word	0x000008fe
    2128:	000008f0 	.word	0x000008f0
    212c:	00000904 	.word	0x00000904
    2130:	0000093a 	.word	0x0000093a
    2134:	00000b0c 	.word	0x00000b0c
    2138:	00000aec 	.word	0x00000aec
    213c:	00000aec 	.word	0x00000aec
    2140:	00000b78 	.word	0x00000b78
    2144:	00000afe 	.word	0x00000afe
    2148:	00000b1a 	.word	0x00000b1a
    214c:	00000af0 	.word	0x00000af0
    2150:	00000b28 	.word	0x00000b28
    2154:	00000b68 	.word	0x00000b68
    2158:	00006425 	.word	0x00006425
    215c:	6c6c6548 	.word	0x6c6c6548
    2160:	6f57206f 	.word	0x6f57206f
    2164:	21646c72 	.word	0x21646c72
    2168:	00000a0d 	.word	0x00000a0d
    216c:	2b302d23 	.word	0x2b302d23
    2170:	6c680020 	.word	0x6c680020
    2174:	6665004c 	.word	0x6665004c
    2178:	47464567 	.word	0x47464567
    217c:	00          	.byte	0x00
    217d:	30          	.byte	0x30
    217e:	3231      	.short	0x3231
    2180:	36353433 	.word	0x36353433
    2184:	41393837 	.word	0x41393837
    2188:	45444342 	.word	0x45444342
    218c:	31300046 	.word	0x31300046
    2190:	35343332 	.word	0x35343332
    2194:	39383736 	.word	0x39383736
    2198:	64636261 	.word	0x64636261
    219c:	00006665 	.word	0x00006665

000021a0 <_init>:
    21a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21a6:	bc08      	pop	{r3}
    21a8:	469e      	mov	lr, r3
    21aa:	4770      	bx	lr

000021ac <__init_array_start>:
    21ac:	000000dd 	.word	0x000000dd

000021b0 <_fini>:
    21b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21b6:	bc08      	pop	{r3}
    21b8:	469e      	mov	lr, r3
    21ba:	4770      	bx	lr

000021bc <__fini_array_start>:
    21bc:	000000b5 	.word	0x000000b5
